k	h	eVC	h(k+1)
2	1	3	3
	2	6	6
	3	8	9
	4	9	12	(10, 2, 4, 467, 0.912109375)
	5	11	15
	6	12	18
	7	13	21
	8	14	24
3	1	4	4
	2	8	8	(9, 3, 2, 226, 0.8828125)
	3	11	12
	4	14	16
	5	15	20
	6	18	24
	7	21	28
4	1	5	5
	2	9	10
	3	14	15
	4	17	20
	5	21	25
5	1	6	6
	2	11	12
	3	15	18
	4	20	24
6	1	7	7
	2	11	14
	3	16	21
	4	19	28


('n', 'k', 'h', 'successful classifications', 'rate')
(1, 2, 1, 1, 1.0)
(2, 2, 1, 2, 1.0)
(3, 2, 1, 4, 1.0)
(4, 2, 1, 5, 0.625, 'intermediate', 1, 0.375)
(4, 2, 1, 7, 0.875, 'intermediate', 3, 0.625)
(4, 2, 1, 7, 0.875)
KVC(0.95): (3, 2, 1)

(1, 2, 2, 1, 1.0)
(2, 2, 2, 2, 1.0)
(3, 2, 2, 4, 1.0)
(4, 2, 2, 8, 1.0)
(5, 2, 2, 16, 1.0)
(6, 2, 2, 32, 1.0)
(7, 2, 2, 37, 0.578125)
KVC(0.95): (6, 2, 2)

(1, 2, 3, 1, 1.0)
(2, 2, 3, 2, 1.0)
(3, 2, 3, 4, 1.0)
(4, 2, 3, 8, 1.0)
(5, 2, 3, 16, 1.0)
(6, 2, 3, 32, 1.0)
(7, 2, 3, 64, 1.0)
(8, 2, 3, 28, 0.21875, 'intermediate', 1, 0.1171875)
(8, 2, 3, 46, 0.359375, 'intermediate', 2, 0.21875)
(8, 2, 3, 100, 0.78125, 'intermediate', 6, 0.359375)
(8, 2, 3, 102, 0.796875, 'intermediate', 11, 0.78125)
(8, 2, 3, 128, 1.0)
(9, 2, 3, 51, 0.19921875, 'intermediate', 1, 0.1796875)
(9, 2, 3, 67, 0.26171875, 'intermediate', 2, 0.19921875)
(9, 2, 3, 98, 0.3828125, 'intermediate', 4, 0.26171875)
(9, 2, 3, 98, 0.3828125)
KVC(0.95): (8, 2, 3)

(1, 2, 4, 1, 1.0)
(2, 2, 4, 2, 1.0)
(3, 2, 4, 4, 1.0)
(4, 2, 4, 8, 1.0)
(5, 2, 4, 16, 1.0)
(6, 2, 4, 32, 1.0)
(7, 2, 4, 64, 1.0)
(8, 2, 4, 128, 1.0)
(9, 2, 4, 162, 0.6328125, 'intermediate', 2, 0.4140625)
(9, 2, 4, 200, 0.78125, 'intermediate', 4, 0.6328125)
(9, 2, 4, 256, 1.0)
(10, 2, 4, 56, 0.109375, 'intermediate', 1, 0.068359375)
(10, 2, 4, 179, 0.349609375, 'intermediate', 2, 0.109375)
(10, 2, 4, 360, 0.703125, 'intermediate', 5, 0.349609375)
(10, 2, 4, 400, 0.78125, 'intermediate', 9, 0.703125)
(10, 2, 4, 467, 0.912109375, 'intermediate', 11, 0.78125)
(10, 2, 4, 467, 0.912109375)
KVC(0.95): (9, 2, 4)

(1, 2, 5, 1, 1.0)
(2, 2, 5, 2, 1.0)
(3, 2, 5, 4, 1.0)
(4, 2, 5, 8, 1.0)
(5, 2, 5, 16, 1.0)
(6, 2, 5, 32, 1.0)
(7, 2, 5, 64, 1.0)
(8, 2, 5, 128, 1.0)
(9, 2, 5, 256, 1.0)
(10, 2, 5, 214, 0.41796875, 'intermediate', 1, 0.068359375)
(10, 2, 5, 512, 1.0)
(11, 2, 5, 365, 0.3564453125, 'intermediate', 1, 0.0576171875)
(11, 2, 5, 412, 0.40234375, 'intermediate', 6, 0.3564453125)
(11, 2, 5, 647, 0.6318359375, 'intermediate', 7, 0.40234375)
(11, 2, 5, 710, 0.693359375, 'intermediate', 8, 0.6318359375)
(11, 2, 5, 1024, 1.0)
(12, 2, 5, 739, 0.36083984375, 'intermediate', 1, 0.0380859375)
(12, 2, 5, 1158, 0.5654296875, 'intermediate', 6, 0.36083984375)
(12, 2, 5, 1158, 0.5654296875)
KVC(0.95): (11, 2, 5)

(1, 2, 6, 1, 1.0)
(2, 2, 6, 2, 1.0)
(3, 2, 6, 4, 1.0)
(4, 2, 6, 8, 1.0)
(5, 2, 6, 16, 1.0)
(6, 2, 6, 32, 1.0)
(7, 2, 6, 64, 1.0)
(8, 2, 6, 128, 1.0)
(9, 2, 6, 256, 1.0)
(10, 2, 6, 512, 1.0)
(11, 2, 6, 1024, 1.0)
(12, 2, 6, 968, 0.47265625, 'intermediate', 1, 0.0576171875)
(12, 2, 6, 1095, 0.53466796875, 'intermediate', 6, 0.47265625)
(12, 2, 6, 1776, 0.8671875, 'intermediate', 7, 0.53466796875)
(12, 2, 6, 2048, 1.0)
(13, 2, 6, 401, 0.097900390625, 'intermediate', 1, 0.006103515625)
(13, 2, 6, 611, 0.149169921875, 'intermediate', 2, 0.097900390625)
(13, 2, 6, 2033, 0.496337890625, 'intermediate', 6, 0.149169921875)
(13, 2, 6, 2033, 0.496337890625)
KVC(0.95): (12, 2, 6)

(1, 2, 7, 1, 1.0)
(2, 2, 7, 2, 1.0)
(3, 2, 7, 4, 1.0)
(4, 2, 7, 8, 1.0)
(5, 2, 7, 16, 1.0)
(6, 2, 7, 32, 1.0)
(7, 2, 7, 64, 1.0)
(8, 2, 7, 128, 1.0)
(9, 2, 7, 256, 1.0)
(10, 2, 7, 512, 1.0)
(11, 2, 7, 1024, 1.0)
(12, 2, 7, 1127, 0.55029296875, 'intermediate', 1, 0.08544921875)
(12, 2, 7, 1603, 0.78271484375, 'intermediate', 4, 0.55029296875)
(12, 2, 7, 2048, 1.0)
(13, 2, 7, 829, 0.202392578125, 'intermediate', 1, 0.041259765625)
(13, 2, 7, 1938, 0.47314453125, 'intermediate', 6, 0.202392578125)
(13, 2, 7, 4096, 1.0)
(14, 2, 7, 663, 0.0809326171875, 'intermediate', 1, 0.0145263671875)
(14, 2, 7, 1650, 0.201416015625, 'intermediate', 4, 0.0809326171875)
(14, 2, 7, 6005, 0.7330322265625, 'intermediate', 8, 0.201416015625)
(14, 2, 7, 6005, 0.7330322265625)
KVC(0.95): (13, 2, 7)

(1, 2, 8, 1, 1.0)
(2, 2, 8, 2, 1.0)
(3, 2, 8, 4, 1.0)
(4, 2, 8, 8, 1.0)
(5, 2, 8, 16, 1.0)
(6, 2, 8, 32, 1.0)
(7, 2, 8, 64, 1.0)
(8, 2, 8, 128, 1.0)
(9, 2, 8, 256, 1.0)
(10, 2, 8, 512, 1.0)
(11, 2, 8, 1024, 1.0)
(12, 2, 8, 2048, 1.0)
(13, 2, 8, 2276, 0.5556640625, 'intermediate', 1, 0.400634765625)
(13, 2, 8, 3115, 0.760498046875, 'intermediate', 2, 0.5556640625)
(13, 2, 8, 4096, 1.0)
(14, 2, 8, 795, 0.0970458984375, 'intermediate', 1, 0.0496826171875)
(14, 2, 8, 6279, 0.7664794921875, 'intermediate', 4, 0.0970458984375)
(14, 2, 8, 8192, 1.0)
(15, 2, 8, 1318, 0.0804443359375, 'intermediate', 1, 0.0262451171875)
(15, 2, 8, 2447, 0.14935302734375, 'intermediate', 2, 0.0804443359375)
(15, 2, 8, 3555, 0.21697998046875, 'intermediate', 4, 0.14935302734375)
(15, 2, 8, 8312, 0.50732421875, 'intermediate', 6, 0.21697998046875)
(15, 2, 8, 13081, 0.79840087890625, 'intermediate', 8, 0.50732421875)
(15, 2, 8, 13081, 0.79840087890625)
KVC(0.95): (14, 2, 8)

done



('n', 'k', 'h', 'successful classifications', 'rate')
(1, 3, 1, 1, 1.0)
(2, 3, 1, 2, 1.0)
(3, 3, 1, 4, 1.0)
(4, 3, 1, 8, 1.0)
(5, 3, 1, 13, 0.8125, 'intermediate', 3, 0.4375)
(5, 3, 1, 14, 0.875, 'intermediate', 4, 0.8125)
(5, 3, 1, 14, 0.875)
KVC(0.95): (4, 3, 1)

(1, 3, 2, 1, 1.0)
(2, 3, 2, 2, 1.0)
(3, 3, 2, 4, 1.0)
(4, 3, 2, 8, 1.0)
(5, 3, 2, 16, 1.0)
(6, 3, 2, 32, 1.0)
(7, 3, 2, 64, 1.0)
(8, 3, 2, 128, 1.0)
(9, 3, 2, 81, 0.31640625, 'intermediate', 3, 0.3046875)
(9, 3, 2, 208, 0.8125, 'intermediate', 4, 0.31640625)
(9, 3, 2, 226, 0.8828125, 'intermediate', 15, 0.8125)
(9, 3, 2, 226, 0.8828125)
KVC(0.95): (8, 3, 2)

(1, 3, 3, 1, 1.0)
(2, 3, 3, 2, 1.0)
(3, 3, 3, 4, 1.0)
(4, 3, 3, 8, 1.0)
(5, 3, 3, 16, 1.0)
(6, 3, 3, 32, 1.0)
(7, 3, 3, 64, 1.0)
(8, 3, 3, 128, 1.0)
(9, 3, 3, 256, 1.0)
(10, 3, 3, 512, 1.0)
(11, 3, 3, 122, 0.119140625, 'intermediate', 1, 0.0458984375)
(11, 3, 3, 442, 0.431640625, 'intermediate', 3, 0.119140625)
(11, 3, 3, 882, 0.861328125, 'intermediate', 4, 0.431640625)
(11, 3, 3, 1024, 1.0)
(12, 3, 3, 143, 0.06982421875, 'intermediate', 1, 0.03857421875)
(12, 3, 3, 312, 0.15234375, 'intermediate', 2, 0.06982421875)
(12, 3, 3, 636, 0.310546875, 'intermediate', 10, 0.15234375)
(12, 3, 3, 636, 0.310546875)
KVC(0.95): (11, 3, 3)

(1, 3, 4, 1, 1.0)
(2, 3, 4, 2, 1.0)
(3, 3, 4, 4, 1.0)
(4, 3, 4, 8, 1.0)
(5, 3, 4, 16, 1.0)
(6, 3, 4, 32, 1.0)
(7, 3, 4, 64, 1.0)
(8, 3, 4, 128, 1.0)
(9, 3, 4, 256, 1.0)
(10, 3, 4, 512, 1.0)
(11, 3, 4, 1024, 1.0)
(12, 3, 4, 2048, 1.0)
(13, 3, 4, 4096, 1.0)
(14, 3, 4, 6394, 0.780517578125, 'intermediate', 1, 0.0338134765625)
(14, 3, 4, 8192, 1.0)
(15, 3, 4, 602, 0.0367431640625, 'intermediate', 6, 0.0277099609375)
(15, 3, 4, 942, 0.0574951171875, 'intermediate', 7, 0.0367431640625)
(15, 3, 4, 2278, 0.1390380859375, 'intermediate', 8, 0.0574951171875)
(15, 3, 4, 2278, 0.1390380859375)
KVC(0.95): (14, 3, 4)

(1, 3, 5, 1, 1.0)
(2, 3, 5, 2, 1.0)
(3, 3, 5, 4, 1.0)
(4, 3, 5, 8, 1.0)
(5, 3, 5, 16, 1.0)
(6, 3, 5, 32, 1.0)
(7, 3, 5, 64, 1.0)
(8, 3, 5, 128, 1.0)
(9, 3, 5, 256, 1.0)
(10, 3, 5, 512, 1.0)
(11, 3, 5, 1024, 1.0)
(12, 3, 5, 2048, 1.0)
(13, 3, 5, 4096, 1.0)
(14, 3, 5, 8192, 1.0)
(15, 3, 5, 16384, 1.0)
(16, 3, 5, 22413, 0.683990478515625, 'intermediate', 1, 0.034088134765625)
(16, 3, 5, 22413, 0.683990478515625)
KVC(0.95): (15, 3, 5)

(1, 3, 6, 1, 1.0)
(2, 3, 6, 2, 1.0)
(3, 3, 6, 4, 1.0)
(4, 3, 6, 8, 1.0)
(5, 3, 6, 16, 1.0)
(6, 3, 6, 32, 1.0)
(7, 3, 6, 64, 1.0)
(8, 3, 6, 128, 1.0)
(9, 3, 6, 256, 1.0)
(10, 3, 6, 512, 1.0)
(11, 3, 6, 1024, 1.0)
(12, 3, 6, 2048, 1.0)
(13, 3, 6, 4096, 1.0)
(14, 3, 6, 8192, 1.0)
(15, 3, 6, 16384, 1.0)
(16, 3, 6, 32768, 1.0)
(17, 3, 6, 65536, 1.0)
(18, 3, 6, 131072, 1.0)
(19, 3, 6, 181151, 0.6910362243652344, 'intermediate', 1, 0.4003448486328125)
(19, 3, 6, 181151, 0.6910362243652344)
KVC(0.95): (18, 3, 6)

(1, 3, 7, 1, 1.0)
(2, 3, 7, 2, 1.0)
(3, 3, 7, 4, 1.0)
(4, 3, 7, 8, 1.0)
(5, 3, 7, 16, 1.0)
(6, 3, 7, 32, 1.0)
(7, 3, 7, 64, 1.0)
(8, 3, 7, 128, 1.0)
(9, 3, 7, 256, 1.0)
(10, 3, 7, 512, 1.0)
(11, 3, 7, 1024, 1.0)
(12, 3, 7, 2048, 1.0)
(13, 3, 7, 4096, 1.0)
(14, 3, 7, 8192, 1.0)
(15, 3, 7, 16384, 1.0)
(16, 3, 7, 32768, 1.0)
(17, 3, 7, 65536, 1.0)
(18, 3, 7, 131072, 1.0)
(19, 3, 7, 262144, 1.0)
(20, 3, 7, 524288, 1.0)
(21, 3, 7, 1048576, 1.0)

('n', 'k', 'h', 'successful classifications', 'rate')
(1, 4, 1, 1, 1.0)
(2, 4, 1, 2, 1.0)
(3, 4, 1, 4, 1.0)
(4, 4, 1, 8, 1.0)
(5, 4, 1, 16, 1.0)
(6, 4, 1, 5, 0.15625, 'intermediate', 1, 0.0625)
(6, 4, 1, 11, 0.34375, 'intermediate', 2, 0.15625)
(6, 4, 1, 19, 0.59375, 'intermediate', 5, 0.34375)
(6, 4, 1, 28, 0.875, 'intermediate', 7, 0.59375)
(6, 4, 1, 28, 0.875)
KVC(0.95): (5, 4, 1)

(1, 4, 2, 1, 1.0)
(2, 4, 2, 2, 1.0)
(3, 4, 2, 4, 1.0)
(4, 4, 2, 8, 1.0)
(5, 4, 2, 16, 1.0)
(6, 4, 2, 32, 1.0)
(7, 4, 2, 64, 1.0)
(8, 4, 2, 128, 1.0)
(9, 4, 2, 91, 0.35546875, 'intermediate', 4, 0.2109375)
(9, 4, 2, 256, 1.0)
(10, 4, 2, 121, 0.236328125, 'intermediate', 3, 0.10546875)
(10, 4, 2, 234, 0.45703125, 'intermediate', 7, 0.236328125)
(10, 4, 2, 234, 0.45703125)
KVC(0.95): (9, 4, 2)

(1, 4, 3, 1, 1.0)
(2, 4, 3, 2, 1.0)
(3, 4, 3, 4, 1.0)
(4, 4, 3, 8, 1.0)
(5, 4, 3, 16, 1.0)
(6, 4, 3, 32, 1.0)
(7, 4, 3, 64, 1.0)
(8, 4, 3, 128, 1.0)
(9, 4, 3, 256, 1.0)
(10, 4, 3, 512, 1.0)
(11, 4, 3, 1024, 1.0)
(12, 4, 3, 2048, 1.0)
(13, 4, 3, 4096, 1.0)
(14, 4, 3, 1008, 0.123046875, 'intermediate', 3, 0.0660400390625)
(14, 4, 3, 1655, 0.2020263671875, 'intermediate', 4, 0.123046875)
(14, 4, 3, 2993, 0.3653564453125, 'intermediate', 6, 0.2020263671875)
(14, 4, 3, 3726, 0.454833984375, 'intermediate', 7, 0.3653564453125)
(14, 4, 3, 5058, 0.617431640625, 'intermediate', 13, 0.454833984375)
(14, 4, 3, 8192, 1.0)
(15, 4, 3, 1498, 0.0914306640625, 'intermediate', 2, 0.01336669921875)
(15, 4, 3, 3299, 0.20135498046875, 'intermediate', 9, 0.0914306640625)
(15, 4, 3, 3299, 0.20135498046875)
KVC(0.95): (14, 4, 3)

(1, 4, 4, 1, 1.0)
(2, 4, 4, 2, 1.0)
(3, 4, 4, 4, 1.0)
(4, 4, 4, 8, 1.0)
(5, 4, 4, 16, 1.0)
(6, 4, 4, 32, 1.0)
(7, 4, 4, 64, 1.0)
(8, 4, 4, 128, 1.0)
(9, 4, 4, 256, 1.0)
(10, 4, 4, 512, 1.0)
(11, 4, 4, 1024, 1.0)
(12, 4, 4, 2048, 1.0)
(13, 4, 4, 4096, 1.0)
(14, 4, 4, 8192, 1.0)
(15, 4, 4, 16384, 1.0)
(16, 4, 4, 32768, 1.0)
(17, 4, 4, 34521, 0.5267486572265625, 'intermediate', 5, 0.525665283203125)
(17, 4, 4, 65536, 1.0)
(18, 4, 4, 1766, 0.0134735107421875, 'intermediate', 1, 0.0120391845703125)
(18, 4, 4, 18767, 0.14318084716796875, 'intermediate', 2, 0.0134735107421875)
(18, 4, 4, 21968, 0.1676025390625, 'intermediate', 4, 0.14318084716796875)
(18, 4, 4, 28747, 0.21932220458984375, 'intermediate', 8, 0.1676025390625)
(18, 4, 4, 28747, 0.21932220458984375)
KVC(0.95): (17, 4, 4)

(1, 4, 5, 1, 1.0)
(2, 4, 5, 2, 1.0)
(3, 4, 5, 4, 1.0)
(4, 4, 5, 8, 1.0)
(5, 4, 5, 16, 1.0)
(6, 4, 5, 32, 1.0)
(7, 4, 5, 64, 1.0)
(8, 4, 5, 128, 1.0)
(9, 4, 5, 256, 1.0)
(10, 4, 5, 512, 1.0)
(11, 4, 5, 1024, 1.0)
(12, 4, 5, 2048, 1.0)
(13, 4, 5, 4096, 1.0)
(14, 4, 5, 8192, 1.0)
(15, 4, 5, 16384, 1.0)
(16, 4, 5, 32768, 1.0)
(17, 4, 5, 65536, 1.0)
(18, 4, 5, 131072, 1.0)
(19, 4, 5, 262144, 1.0)
(20, 4, 5, 524288, 1.0)
(21, 4, 5, 1048576, 1.0)
(22, 4, 5, 165840, 0.07907867431640625, 'intermediate', 1, 0.07268953323364258)
(22, 4, 5, 167890, 0.08005619049072266, 'intermediate', 3, 0.07907867431640625)
(22, 4, 5, 497422, 0.23718929290771484, 'intermediate', 4, 0.08005619049072266)
(22, 4, 5, 608170, 0.28999805450439453, 'intermediate', 5, 0.23718929290771484)








N = 60
K = [6] #,3,4,5] #,2,3,4,5] #,4] #,3] #,4,5,6,7,8] #,9,10]
H = [1,2,3,4,5,6,7,8] #,32,128,512]
max_l = 32

import itertools
import numpy
import random
from sklearn.neural_network import MLPClassifier

results = []
print("n","k","h","successful classifications", "rate")
for k in K:
    numpy.random.seed(0)
    # print data
    for h in H:
        numpy.random.seed(0)
        for n in range(N):
            n += 1
            data_results = []
            l_len = min(n-1,max_l-1)
            for r_data in range(20):
                numpy.random.seed(r_data)
                data = numpy.random.normal(size=[N,k])
                numpy.random.seed(0)
                true_results = 0
                for label_int in range(2**l_len):
                    if max_l < n:
                      label_int = numpy.random.randint(0, 2**(n-1))
                    labels = [int(i) for i in bin(label_int * 2 + 2**(N+2))[-n:]]
                    d = data[:n]
                    converged = False
                    for r_mlp in range(20): #lbfgs
                        clf = MLPClassifier(
                            hidden_layer_sizes=(h,), random_state=r_mlp, 
                            #activation='relu', solver="lbfgs",
                            activation='relu', solver="lbfgs",
                            alpha=0)
                        clf.fit(d, labels)
                        if (clf.predict(d) == labels).all():
                            true_results += 1
                            converged = True
                            break
                    if not converged:
                      break
                if true_results == 2**l_len:
                    data_results.append(true_results)
                    break
                if data_results and true_results > max(data_results):
                    print(n, k, h, true_results, true_results*1.0/2**l_len, "intermediate", r_data, max(data_results)*1.0/2**l_len)
                data_results.append(true_results)
            true_results = max(data_results)
            print(n, k, h, true_results, true_results*1.0/2**l_len)
            results.append((n, k, h, true_results, true_results*1.0/2**l_len))
            if true_results*1.0/2**l_len < 0.95:
                print "KVC(0.95): "+str((n-1,k, h))
                print
                break
    print "done"