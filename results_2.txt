k	h	VC	comment
2	2	4	(5, 2, 2, 30, 0.9375)
	3	4	(5, 2, 3, 30, 0.9375)(6, 2, 3, 56, 0.875)
	4	6	(7, 2, 4, 118, 0.921875)
	5	6	(7, 2, 5, 118, 0.921875)
	6	6	(7, 2, 6, 124, 0.96875)(8, 2, 6, 242, 0.9453125)
	7	7	(8, 2, 7, 244, 0.953125)
	8	6	(7, 2, 8, 126, 0.984375)(8, 2, 8, 246, 0.9609375)
3	2	4	(5, 3, 1, 30, 0.9375)
	3	5	
	4	6	
	5	7	
	6	8	
	7	10	
	8	7	
4	2	6	
	3	7	(8, 4, 3, 254, 0.9921875)	
	4	9	(10, 4, 4, 252, 0.984375)
	5	11	(12, 4, 5, 254, 0.9921875)
	6	12	(15, 4, 6, 252, 0.984375)
	7		
	8		
5	2	7	(8, 5, 2, 252, 0.984375)(9, 5, 2, 250, 0.9765625)
	3	9	(10, 5, 3, 252, 0.984375)
	4	9	(11, 5, 4, 248, 0.96875)
	5		
	6		
	7		
	8		

('n', 'k', 'h', 'successful classifications', 'rate')
(1, 2, 2, 2, 1.0)
(2, 2, 2, 4, 1.0)
(3, 2, 2, 8, 1.0)
(4, 2, 2, 16, 1.0)
(5, 2, 2, 30, 0.9375, 'intermediate', 3, 0.875)
(5, 2, 2, 30, 0.9375)
(6, 2, 2, 50, 0.78125, 'intermediate', 8, 0.65625)
(6, 2, 2, 50, 0.78125)
VC(0.9): (5, 2, 2)

(1, 2, 3, 2, 1.0)
(2, 2, 3, 4, 1.0)
(3, 2, 3, 8, 1.0)
(4, 2, 3, 16, 1.0)
(5, 2, 3, 30, 0.9375, 'intermediate', 3, 0.875)
(5, 2, 3, 30, 0.9375)
(6, 2, 3, 54, 0.84375, 'intermediate', 4, 0.75)
(6, 2, 3, 56, 0.875, 'intermediate', 6, 0.84375)
(6, 2, 3, 56, 0.875)
VC(0.9): (5, 2, 3)

(1, 2, 4, 2, 1.0)
(2, 2, 4, 4, 1.0)
(3, 2, 4, 8, 1.0)
(4, 2, 4, 16, 1.0)
(5, 2, 4, 32, 1.0)
(6, 2, 4, 64, 1.0)
(7, 2, 4, 108, 0.84375, 'intermediate', 3, 0.828125)
(7, 2, 4, 110, 0.859375, 'intermediate', 4, 0.84375)
(7, 2, 4, 112, 0.875, 'intermediate', 5, 0.859375)
(7, 2, 4, 114, 0.890625, 'intermediate', 7, 0.875)
(7, 2, 4, 116, 0.90625, 'intermediate', 9, 0.890625)
(7, 2, 4, 118, 0.921875, 'intermediate', 10, 0.90625)
(7, 2, 4, 118, 0.921875)
(8, 2, 4, 204, 0.796875, 'intermediate', 1, 0.7109375)
(8, 2, 4, 206, 0.8046875, 'intermediate', 5, 0.796875)
(8, 2, 4, 216, 0.84375, 'intermediate', 7, 0.8046875)
(8, 2, 4, 228, 0.890625, 'intermediate', 9, 0.84375)
(8, 2, 4, 228, 0.890625)
VC(0.9): (7, 2, 4)

(1, 2, 5, 2, 1.0)
(2, 2, 5, 4, 1.0)
(3, 2, 5, 8, 1.0)
(4, 2, 5, 16, 1.0)
(5, 2, 5, 32, 1.0)
(6, 2, 5, 58, 0.90625, 'intermediate', 3, 0.84375)
(6, 2, 5, 62, 0.96875, 'intermediate', 6, 0.90625)
(6, 2, 5, 64, 1.0)
(7, 2, 5, 100, 0.78125, 'intermediate', 1, 0.765625)
(7, 2, 5, 110, 0.859375, 'intermediate', 3, 0.78125)
(7, 2, 5, 118, 0.921875, 'intermediate', 7, 0.859375)
(7, 2, 5, 118, 0.921875)
(8, 2, 5, 200, 0.78125, 'intermediate', 3, 0.75)
(8, 2, 5, 204, 0.796875, 'intermediate', 5, 0.78125)
(8, 2, 5, 214, 0.8359375, 'intermediate', 7, 0.796875)
(8, 2, 5, 216, 0.84375, 'intermediate', 9, 0.8359375)
(8, 2, 5, 220, 0.859375, 'intermediate', 10, 0.84375)
(8, 2, 5, 220, 0.859375)
VC(0.9): (7, 2, 5)

(1, 2, 6, 2, 1.0)
(2, 2, 6, 4, 1.0)
(3, 2, 6, 8, 1.0)
(4, 2, 6, 16, 1.0)
(5, 2, 6, 32, 1.0)
(6, 2, 6, 64, 1.0)
(7, 2, 6, 116, 0.90625, 'intermediate', 2, 0.890625)
(7, 2, 6, 120, 0.9375, 'intermediate', 5, 0.90625)
(7, 2, 6, 124, 0.96875, 'intermediate', 7, 0.9375)
(7, 2, 6, 124, 0.96875)
(8, 2, 6, 220, 0.859375, 'intermediate', 1, 0.8125)
(8, 2, 6, 224, 0.875, 'intermediate', 4, 0.859375)
(8, 2, 6, 228, 0.890625, 'intermediate', 5, 0.875)
(8, 2, 6, 236, 0.921875, 'intermediate', 7, 0.890625)
(8, 2, 6, 240, 0.9375, 'intermediate', 10, 0.921875)
(8, 2, 6, 242, 0.9453125, 'intermediate', 17, 0.9375)
(8, 2, 6, 242, 0.9453125)
(9, 2, 6, 224, 0.875, 'intermediate', 4, 0.8125)
(9, 2, 6, 228, 0.890625, 'intermediate', 9, 0.875)
(9, 2, 6, 228, 0.890625)
VC(0.9): (8, 2, 6)

(1, 2, 7, 2, 1.0)
(2, 2, 7, 4, 1.0)
(3, 2, 7, 8, 1.0)
(4, 2, 7, 16, 1.0)
(5, 2, 7, 32, 1.0)
(6, 2, 7, 64, 1.0)
(7, 2, 7, 114, 0.890625, 'intermediate', 1, 0.859375)
(7, 2, 7, 118, 0.921875, 'intermediate', 2, 0.890625)
(7, 2, 7, 120, 0.9375, 'intermediate', 4, 0.921875)
(7, 2, 7, 124, 0.96875, 'intermediate', 7, 0.9375)
(7, 2, 7, 126, 0.984375, 'intermediate', 10, 0.96875)
(7, 2, 7, 128, 1.0)
(8, 2, 7, 226, 0.8828125, 'intermediate', 1, 0.765625)
(8, 2, 7, 230, 0.8984375, 'intermediate', 4, 0.8828125)
(8, 2, 7, 234, 0.9140625, 'intermediate', 7, 0.8984375)
(8, 2, 7, 242, 0.9453125, 'intermediate', 9, 0.9140625)
(8, 2, 7, 244, 0.953125, 'intermediate', 17, 0.9453125)
(8, 2, 7, 244, 0.953125)
(9, 2, 7, 210, 0.8203125, 'intermediate', 2, 0.7890625)
(9, 2, 7, 224, 0.875, 'intermediate', 4, 0.8203125)
(9, 2, 7, 226, 0.8828125, 'intermediate', 9, 0.875)
(9, 2, 7, 228, 0.890625, 'intermediate', 10, 0.8828125)
(9, 2, 7, 230, 0.8984375, 'intermediate', 15, 0.890625)
(9, 2, 7, 230, 0.8984375)
VC(0.9): (8, 2, 7)

(1, 2, 8, 2, 1.0)
(2, 2, 8, 4, 1.0)
(3, 2, 8, 8, 1.0)
(4, 2, 8, 16, 1.0)
(5, 2, 8, 32, 1.0)
(6, 2, 8, 62, 0.96875, 'intermediate', 2, 0.9375)
(6, 2, 8, 64, 1.0)
(7, 2, 8, 112, 0.875, 'intermediate', 1, 0.828125)
(7, 2, 8, 114, 0.890625, 'intermediate', 2, 0.875)
(7, 2, 8, 116, 0.90625, 'intermediate', 6, 0.890625)
(7, 2, 8, 122, 0.953125, 'intermediate', 7, 0.90625)
(7, 2, 8, 124, 0.96875, 'intermediate', 9, 0.953125)
(7, 2, 8, 126, 0.984375, 'intermediate', 10, 0.96875)
(7, 2, 8, 126, 0.984375)
(8, 2, 8, 222, 0.8671875, 'intermediate', 1, 0.7734375)
(8, 2, 8, 228, 0.890625, 'intermediate', 5, 0.8671875)
(8, 2, 8, 236, 0.921875, 'intermediate', 7, 0.890625)
(8, 2, 8, 246, 0.9609375, 'intermediate', 9, 0.921875)
(8, 2, 8, 246, 0.9609375)
(9, 2, 8, 216, 0.84375, 'intermediate', 3, 0.8046875)
(9, 2, 8, 224, 0.875, 'intermediate', 4, 0.84375)
(9, 2, 8, 226, 0.8828125, 'intermediate', 9, 0.875)
(9, 2, 8, 230, 0.8984375, 'intermediate', 10, 0.8828125)
(9, 2, 8, 230, 0.8984375)
VC(0.9): (8, 2, 8)

done


('n', 'k', 'h', 'successful classifications', 'rate')
(1, 3, 1, 2, 1.0)
(2, 3, 1, 4, 1.0)
(3, 3, 1, 8, 1.0)
(4, 3, 1, 16, 1.0)
(5, 3, 1, 30, 0.9375, 'intermediate', 1, 0.875)
(5, 3, 1, 30, 0.9375)
(6, 3, 1, 54, 0.84375, 'intermediate', 2, 0.8125)
(6, 3, 1, 56, 0.875, 'intermediate', 17, 0.84375)
(6, 3, 1, 56, 0.875)
KVC(0.9): (5, 3, 1)

(1, 3, 2, 2, 1.0)
(2, 3, 2, 4, 1.0)
(3, 3, 2, 8, 1.0)
(4, 3, 2, 16, 1.0)
(5, 3, 2, 32, 1.0)
(6, 3, 2, 60, 0.9375, 'intermediate', 13, 0.875)
(6, 3, 2, 60, 0.9375)
(7, 3, 2, 102, 0.796875, 'intermediate', 4, 0.78125)
(7, 3, 2, 104, 0.8125, 'intermediate', 7, 0.796875)
(7, 3, 2, 106, 0.828125, 'intermediate', 9, 0.8125)
(7, 3, 2, 108, 0.84375, 'intermediate', 15, 0.828125)
(7, 3, 2, 108, 0.84375)
KVC(0.9): (6, 3, 2)

(1, 3, 3, 2, 1.0)
(2, 3, 3, 4, 1.0)
(3, 3, 3, 8, 1.0)
(4, 3, 3, 16, 1.0)
(5, 3, 3, 32, 1.0)
(6, 3, 3, 64, 1.0)
(7, 3, 3, 122, 0.953125, 'intermediate', 1, 0.890625)
(7, 3, 3, 124, 0.96875, 'intermediate', 4, 0.953125)
(7, 3, 3, 126, 0.984375, 'intermediate', 9, 0.96875)
(7, 3, 3, 126, 0.984375)
(8, 3, 3, 232, 0.90625, 'intermediate', 1, 0.8828125)
(8, 3, 3, 236, 0.921875, 'intermediate', 4, 0.90625)
(8, 3, 3, 240, 0.9375, 'intermediate', 12, 0.921875)
(8, 3, 3, 240, 0.9375)
(9, 3, 3, 230, 0.8984375, 'intermediate', 1, 0.7578125)
(9, 3, 3, 232, 0.90625, 'intermediate', 11, 0.8984375)
(9, 3, 3, 238, 0.9296875, 'intermediate', 16, 0.90625)
(9, 3, 3, 238, 0.9296875)
(10, 3, 3, 198, 0.7734375, 'intermediate', 1, 0.7578125)
(10, 3, 3, 206, 0.8046875, 'intermediate', 4, 0.7734375)
(10, 3, 3, 208, 0.8125, 'intermediate', 11, 0.8046875)
(10, 3, 3, 220, 0.859375, 'intermediate', 15, 0.8125)
(10, 3, 3, 222, 0.8671875, 'intermediate', 16, 0.859375)
(10, 3, 3, 222, 0.8671875)
KVC(0.9): (9, 3, 3)

(1, 3, 4, 2, 1.0)
(2, 3, 4, 4, 1.0)
(3, 3, 4, 8, 1.0)
(4, 3, 4, 16, 1.0)
(5, 3, 4, 32, 1.0)
(6, 3, 4, 64, 1.0)
(7, 3, 4, 126, 0.984375, 'intermediate', 1, 0.921875)
(7, 3, 4, 128, 1.0)
(8, 3, 4, 236, 0.921875, 'intermediate', 1, 0.890625)
(8, 3, 4, 238, 0.9296875, 'intermediate', 7, 0.921875)
(8, 3, 4, 240, 0.9375, 'intermediate', 15, 0.9296875)
(8, 3, 4, 240, 0.9375)
(9, 3, 4, 230, 0.8984375, 'intermediate', 1, 0.8046875)
(9, 3, 4, 234, 0.9140625, 'intermediate', 13, 0.8984375)
(9, 3, 4, 234, 0.9140625)
(10, 3, 4, 216, 0.84375, 'intermediate', 1, 0.78125)
(10, 3, 4, 218, 0.8515625, 'intermediate', 13, 0.84375)
(10, 3, 4, 230, 0.8984375, 'intermediate', 15, 0.8515625)
(10, 3, 4, 230, 0.8984375)
KVC(0.9): (9, 3, 4)

(1, 3, 5, 2, 1.0)
(2, 3, 5, 4, 1.0)
(3, 3, 5, 8, 1.0)
(4, 3, 5, 16, 1.0)
(5, 3, 5, 32, 1.0)
(6, 3, 5, 64, 1.0)
(7, 3, 5, 128, 1.0)
(8, 3, 5, 250, 0.9765625, 'intermediate', 1, 0.953125)
(8, 3, 5, 250, 0.9765625)
(9, 3, 5, 244, 0.953125, 'intermediate', 1, 0.890625)
(9, 3, 5, 246, 0.9609375, 'intermediate', 10, 0.953125)
(9, 3, 5, 246, 0.9609375)
(10, 3, 5, 238, 0.9296875, 'intermediate', 3, 0.890625)
(10, 3, 5, 240, 0.9375, 'intermediate', 15, 0.9296875)
(10, 3, 5, 240, 0.9375)
(11, 3, 5, 214, 0.8359375, 'intermediate', 1, 0.8046875)
(11, 3, 5, 220, 0.859375, 'intermediate', 2, 0.8359375)
(11, 3, 5, 230, 0.8984375, 'intermediate', 4, 0.859375)
(11, 3, 5, 236, 0.921875, 'intermediate', 16, 0.8984375)
(11, 3, 5, 236, 0.921875)
(12, 3, 5, 210, 0.8203125, 'intermediate', 1, 0.8046875)
(12, 3, 5, 216, 0.84375, 'intermediate', 5, 0.8203125)
(12, 3, 5, 226, 0.8828125, 'intermediate', 11, 0.84375)
(12, 3, 5, 226, 0.8828125)
KVC(0.9): (11, 3, 5)

(1, 3, 6, 2, 1.0)
(2, 3, 6, 4, 1.0)
(3, 3, 6, 8, 1.0)
(4, 3, 6, 16, 1.0)
(5, 3, 6, 32, 1.0)
(6, 3, 6, 64, 1.0)
(7, 3, 6, 128, 1.0)
(8, 3, 6, 246, 0.9609375, 'intermediate', 1, 0.9296875)
(8, 3, 6, 250, 0.9765625, 'intermediate', 3, 0.9609375)
(8, 3, 6, 252, 0.984375, 'intermediate', 10, 0.9765625)
(8, 3, 6, 254, 0.9921875, 'intermediate', 15, 0.984375)
(8, 3, 6, 256, 1.0)
(9, 3, 6, 250, 0.9765625, 'intermediate', 1, 0.9375)
(9, 3, 6, 252, 0.984375, 'intermediate', 16, 0.9765625)
(9, 3, 6, 252, 0.984375)
(10, 3, 6, 238, 0.9296875, 'intermediate', 1, 0.875)
(10, 3, 6, 242, 0.9453125, 'intermediate', 3, 0.9296875)
(10, 3, 6, 244, 0.953125, 'intermediate', 4, 0.9453125)
(10, 3, 6, 246, 0.9609375, 'intermediate', 9, 0.953125)
(10, 3, 6, 250, 0.9765625, 'intermediate', 12, 0.9609375)
(10, 3, 6, 250, 0.9765625)
(11, 3, 6, 242, 0.9453125, 'intermediate', 1, 0.8671875)
(11, 3, 6, 246, 0.9609375, 'intermediate', 5, 0.9453125)
(11, 3, 6, 250, 0.9765625, 'intermediate', 15, 0.9609375)
(11, 3, 6, 250, 0.9765625)
(12, 3, 6, 222, 0.8671875, 'intermediate', 1, 0.8359375)
(12, 3, 6, 232, 0.90625, 'intermediate', 3, 0.8671875)
(12, 3, 6, 242, 0.9453125, 'intermediate', 5, 0.90625)
(12, 3, 6, 242, 0.9453125)
(13, 3, 6, 220, 0.859375, 'intermediate', 4, 0.8359375)
(13, 3, 6, 228, 0.890625, 'intermediate', 11, 0.859375)
(13, 3, 6, 228, 0.890625)
KVC(0.9): (12, 3, 6)

(1, 3, 7, 2, 1.0)
(2, 3, 7, 4, 1.0)
(3, 3, 7, 8, 1.0)
(4, 3, 7, 16, 1.0)
(5, 3, 7, 32, 1.0)
(6, 3, 7, 64, 1.0)
(7, 3, 7, 128, 1.0)
(8, 3, 7, 256, 1.0)
(9, 3, 7, 254, 0.9921875, 'intermediate', 1, 0.9765625)
(9, 3, 7, 256, 1.0)
(10, 3, 7, 252, 0.984375, 'intermediate', 5, 0.96875)
(10, 3, 7, 254, 0.9921875, 'intermediate', 9, 0.984375)
(10, 3, 7, 256, 1.0)
(11, 3, 7, 252, 0.984375, 'intermediate', 1, 0.921875)
(11, 3, 7, 252, 0.984375)
(12, 3, 7, 246, 0.9609375, 'intermediate', 1, 0.921875)
(12, 3, 7, 248, 0.96875, 'intermediate', 18, 0.9609375)
(12, 3, 7, 248, 0.96875)
(13, 3, 7, 240, 0.9375, 'intermediate', 5, 0.9140625)
(13, 3, 7, 242, 0.9453125, 'intermediate', 8, 0.9375)
(13, 3, 7, 244, 0.953125, 'intermediate', 19, 0.9453125)
(13, 3, 7, 244, 0.953125)
(14, 3, 7, 230, 0.8984375, 'intermediate', 1, 0.875)
(14, 3, 7, 234, 0.9140625, 'intermediate', 5, 0.8984375)
(14, 3, 7, 236, 0.921875, 'intermediate', 12, 0.9140625)
(14, 3, 7, 244, 0.953125, 'intermediate', 16, 0.921875)
(14, 3, 7, 244, 0.953125)
(15, 3, 7, 232, 0.90625, 'intermediate', 5, 0.859375)
(15, 3, 7, 236, 0.921875, 'intermediate', 16, 0.90625)
(15, 3, 7, 236, 0.921875)
(16, 3, 7, 212, 0.828125, 'intermediate', 1, 0.75)
(16, 3, 7, 216, 0.84375, 'intermediate', 5, 0.828125)
(16, 3, 7, 220, 0.859375, 'intermediate', 11, 0.84375)
(16, 3, 7, 222, 0.8671875, 'intermediate', 12, 0.859375)
(16, 3, 7, 222, 0.8671875)
KVC(0.9): (15, 3, 7)

(1, 3, 8, 2, 1.0)
(2, 3, 8, 4, 1.0)
(3, 3, 8, 8, 1.0)
(4, 3, 8, 16, 1.0)
(5, 3, 8, 32, 1.0)
(6, 3, 8, 64, 1.0)
(7, 3, 8, 126, 0.984375, 'intermediate', 1, 0.96875)
(7, 3, 8, 128, 1.0)
(8, 3, 8, 250, 0.9765625, 'intermediate', 1, 0.9453125)
(8, 3, 8, 252, 0.984375, 'intermediate', 12, 0.9765625)
(8, 3, 8, 252, 0.984375)
(9, 3, 8, 244, 0.953125, 'intermediate', 1, 0.9296875)
(9, 3, 8, 246, 0.9609375, 'intermediate', 11, 0.953125)
(9, 3, 8, 248, 0.96875, 'intermediate', 17, 0.9609375)
(9, 3, 8, 248, 0.96875)
(10, 3, 8, 234, 0.9140625, 'intermediate', 3, 0.90625)
(10, 3, 8, 242, 0.9453125, 'intermediate', 4, 0.9140625)
(10, 3, 8, 244, 0.953125, 'intermediate', 5, 0.9453125)
(10, 3, 8, 244, 0.953125)
(11, 3, 8, 220, 0.859375, 'intermediate', 1, 0.84375)
(11, 3, 8, 230, 0.8984375, 'intermediate', 4, 0.859375)
(11, 3, 8, 236, 0.921875, 'intermediate', 5, 0.8984375)
(11, 3, 8, 236, 0.921875)
(12, 3, 8, 228, 0.890625, 'intermediate', 1, 0.8046875)
(12, 3, 8, 234, 0.9140625, 'intermediate', 4, 0.890625)
(12, 3, 8, 234, 0.9140625)
(13, 3, 8, 206, 0.8046875, 'intermediate', 1, 0.78125)
(13, 3, 8, 216, 0.84375, 'intermediate', 4, 0.8046875)
(13, 3, 8, 216, 0.84375)
KVC(0.9): (12, 3, 8)

done

('n', 'k', 'h', 'successful classifications', 'rate')
(1, 4, 1, 2, 1.0)
(2, 4, 1, 4, 1.0)
(3, 4, 1, 8, 1.0)
(4, 4, 1, 16, 1.0)
(5, 4, 1, 32, 1.0)
(6, 4, 1, 64, 1.0)
(7, 4, 1, 114, 0.890625, 'intermediate', 1, 0.875)
(7, 4, 1, 114, 0.890625)
KVC(0.9): (6, 4, 1)

(1, 4, 2, 2, 1.0)
(2, 4, 2, 4, 1.0)
(3, 4, 2, 8, 1.0)
(4, 4, 2, 16, 1.0)
(5, 4, 2, 32, 1.0)
(6, 4, 2, 62, 0.96875, 'intermediate', 1, 0.9375)
(6, 4, 2, 64, 1.0)
(7, 4, 2, 118, 0.921875, 'intermediate', 1, 0.90625)
(7, 4, 2, 122, 0.953125, 'intermediate', 12, 0.921875)
(7, 4, 2, 122, 0.953125)
(8, 4, 2, 222, 0.8671875, 'intermediate', 1, 0.859375)
(8, 4, 2, 232, 0.90625, 'intermediate', 13, 0.8671875)
(8, 4, 2, 238, 0.9296875, 'intermediate', 15, 0.90625)
(8, 4, 2, 238, 0.9296875)
(9, 4, 2, 224, 0.875, 'intermediate', 1, 0.765625)
(9, 4, 2, 228, 0.890625, 'intermediate', 18, 0.875)
(9, 4, 2, 228, 0.890625)
KVC(0.9): (8, 4, 2)

(1, 4, 3, 2, 1.0)
(2, 4, 3, 4, 1.0)
(3, 4, 3, 8, 1.0)
(4, 4, 3, 16, 1.0)
(5, 4, 3, 32, 1.0)
(6, 4, 3, 64, 1.0)
(7, 4, 3, 128, 1.0)
(8, 4, 3, 254, 0.9921875, 'intermediate', 1, 0.9765625)
(8, 4, 3, 254, 0.9921875)
(9, 4, 3, 250, 0.9765625, 'intermediate', 1, 0.9453125)
(9, 4, 3, 252, 0.984375, 'intermediate', 7, 0.9765625)
(9, 4, 3, 252, 0.984375)
(10, 4, 3, 240, 0.9375)
(11, 4, 3, 238, 0.9296875, 'intermediate', 1, 0.859375)
(11, 4, 3, 238, 0.9296875)
(12, 4, 3, 220, 0.859375, 'intermediate', 1, 0.796875)
(12, 4, 3, 226, 0.8828125, 'intermediate', 15, 0.859375)
(12, 4, 3, 228, 0.890625, 'intermediate', 19, 0.8828125)
(12, 4, 3, 228, 0.890625)
KVC(0.9): (11, 4, 3)

(1, 4, 4, 2, 1.0)
(2, 4, 4, 4, 1.0)
(3, 4, 4, 8, 1.0)
(4, 4, 4, 16, 1.0)
(5, 4, 4, 32, 1.0)
(6, 4, 4, 64, 1.0)
(7, 4, 4, 128, 1.0)
(8, 4, 4, 256, 1.0)
(9, 4, 4, 252, 0.984375, 'intermediate', 4, 0.9765625)
(9, 4, 4, 254, 0.9921875, 'intermediate', 7, 0.984375)
(9, 4, 4, 256, 1.0)
(10, 4, 4, 250, 0.9765625, 'intermediate', 4, 0.96875)
(10, 4, 4, 252, 0.984375, 'intermediate', 14, 0.9765625)
(10, 4, 4, 252, 0.984375)
(11, 4, 4, 240, 0.9375, 'intermediate', 3, 0.90625)
(11, 4, 4, 246, 0.9609375, 'intermediate', 5, 0.9375)
(11, 4, 4, 246, 0.9609375)
(12, 4, 4, 238, 0.9296875, 'intermediate', 8, 0.921875)
(12, 4, 4, 240, 0.9375, 'intermediate', 10, 0.9296875)
(12, 4, 4, 246, 0.9609375, 'intermediate', 17, 0.9375)
(12, 4, 4, 246, 0.9609375)
(13, 4, 4, 234, 0.9140625, 'intermediate', 10, 0.90625)
(13, 4, 4, 234, 0.9140625)
(14, 4, 4, 216, 0.84375, 'intermediate', 2, 0.8359375)
(14, 4, 4, 218, 0.8515625, 'intermediate', 4, 0.84375)
(14, 4, 4, 228, 0.890625, 'intermediate', 7, 0.8515625)
(14, 4, 4, 228, 0.890625)
KVC(0.9): (13, 4, 4)

(1, 4, 5, 2, 1.0)
(2, 4, 5, 4, 1.0)
(3, 4, 5, 8, 1.0)
(4, 4, 5, 16, 1.0)
(5, 4, 5, 32, 1.0)
(6, 4, 5, 64, 1.0)
(7, 4, 5, 128, 1.0)
(8, 4, 5, 256, 1.0)
(9, 4, 5, 256, 1.0)
(10, 4, 5, 252, 0.984375, 'intermediate', 1, 0.96875)
(10, 4, 5, 256, 1.0)
(11, 4, 5, 254, 0.9921875, 'intermediate', 1, 0.9765625)
(11, 4, 5, 256, 1.0)
(12, 4, 5, 248, 0.96875, 'intermediate', 1, 0.9296875)
(12, 4, 5, 250, 0.9765625, 'intermediate', 2, 0.96875)
(12, 4, 5, 254, 0.9921875, 'intermediate', 18, 0.9765625)
(12, 4, 5, 254, 0.9921875)
(13, 4, 5, 248, 0.96875, 'intermediate', 1, 0.9296875)
(13, 4, 5, 252, 0.984375, 'intermediate', 14, 0.96875)
(13, 4, 5, 252, 0.984375)
(14, 4, 5, 246, 0.9609375, 'intermediate', 1, 0.921875)
(14, 4, 5, 246, 0.9609375)
(15, 4, 5, 238, 0.9296875, 'intermediate', 1, 0.890625)
(15, 4, 5, 240, 0.9375, 'intermediate', 14, 0.9296875)
(15, 4, 5, 240, 0.9375)
(16, 4, 5, 228, 0.890625, 'intermediate', 1, 0.8515625)
(16, 4, 5, 228, 0.890625)
KVC(0.9): (15, 4, 5)

(1, 4, 6, 2, 1.0)
(2, 4, 6, 4, 1.0)
(3, 4, 6, 8, 1.0)
(4, 4, 6, 16, 1.0)
(5, 4, 6, 32, 1.0)
(6, 4, 6, 64, 1.0)
(7, 4, 6, 128, 1.0)
(8, 4, 6, 256, 1.0)
(9, 4, 6, 256, 1.0)
(10, 4, 6, 256, 1.0)
(11, 4, 6, 256, 1.0)
(12, 4, 6, 256, 1.0)
(13, 4, 6, 254, 0.9921875)
(14, 4, 6, 250, 0.9765625, 'intermediate', 1, 0.96875)
(14, 4, 6, 252, 0.984375, 'intermediate', 11, 0.9765625)
(14, 4, 6, 254, 0.9921875, 'intermediate', 12, 0.984375)
(14, 4, 6, 254, 0.9921875)
(15, 4, 6, 246, 0.9609375, 'intermediate', 1, 0.9453125)
(15, 4, 6, 248, 0.96875, 'intermediate', 7, 0.9609375)
(15, 4, 6, 252, 0.984375, 'intermediate', 12, 0.96875)
(15, 4, 6, 252, 0.984375)
(16, 4, 6, 248, 0.96875, 'intermediate', 1, 0.9296875)
(16, 4, 6, 250, 0.9765625, 'intermediate', 13, 0.96875)
(16, 4, 6, 250, 0.9765625)
(17, 4, 6, 244, 0.953125, 'intermediate', 5, 0.921875)
(17, 4, 6, 246, 0.9609375, 'intermediate', 10, 0.953125)
(17, 4, 6, 246, 0.9609375)
(18, 4, 6, 238, 0.9296875, 'intermediate', 4, 0.8828125)
(18, 4, 6, 238, 0.9296875)
(19, 4, 6, 228, 0.890625, 'intermediate', 19, 0.8828125)
(19, 4, 6, 228, 0.890625)
KVC(0.9): (18, 4, 6)

(1, 4, 7, 2, 1.0)
(2, 4, 7, 4, 1.0)
(3, 4, 7, 8, 1.0)
(4, 4, 7, 16, 1.0)
(5, 4, 7, 32, 1.0)
(6, 4, 7, 64, 1.0)
(7, 4, 7, 128, 1.0)
(8, 4, 7, 256, 1.0)
(9, 4, 7, 256, 1.0)
(10, 4, 7, 254, 0.9921875, 'intermediate', 2, 0.984375)
(10, 4, 7, 256, 1.0)
(11, 4, 7, 254, 0.9921875, 'intermediate', 4, 0.984375)
(11, 4, 7, 256, 1.0)
(12, 4, 7, 250, 0.9765625, 'intermediate', 1, 0.96875)
(12, 4, 7, 252, 0.984375, 'intermediate', 5, 0.9765625)
(12, 4, 7, 254, 0.9921875, 'intermediate', 9, 0.984375)
(12, 4, 7, 256, 1.0)
(13, 4, 7, 252, 0.984375)
(14, 4, 7, 252, 0.984375, 'intermediate', 1, 0.953125)
(14, 4, 7, 252, 0.984375)
(15, 4, 7, 248, 0.96875, 'intermediate', 1, 0.9453125)
(15, 4, 7, 248, 0.96875)
(16, 4, 7, 244, 0.953125, 'intermediate', 5, 0.9140625)
(16, 4, 7, 246, 0.9609375, 'intermediate', 19, 0.953125)
(16, 4, 7, 246, 0.9609375)
(17, 4, 7, 234, 0.9140625, 'intermediate', 1, 0.90625)
(17, 4, 7, 238, 0.9296875, 'intermediate', 10, 0.9140625)
(17, 4, 7, 242, 0.9453125, 'intermediate', 17, 0.9296875)
(17, 4, 7, 242, 0.9453125)
(18, 4, 7, 234, 0.9140625, 'intermediate', 5, 0.90625)
(18, 4, 7, 238, 0.9296875, 'intermediate', 19, 0.9140625)
(18, 4, 7, 238, 0.9296875)
(19, 4, 7, 232, 0.90625)
(20, 4, 7, 222, 0.8671875, 'intermediate', 1, 0.8515625)
(20, 4, 7, 222, 0.8671875)
KVC(0.9): (19, 4, 7)

(1, 4, 8, 2, 1.0)
(2, 4, 8, 4, 1.0)
(3, 4, 8, 8, 1.0)
(4, 4, 8, 16, 1.0)
(5, 4, 8, 32, 1.0)
(6, 4, 8, 64, 1.0)
(7, 4, 8, 126, 0.984375, 'intermediate', 1, 0.96875)
(7, 4, 8, 128, 1.0)
(8, 4, 8, 252, 0.984375, 'intermediate', 1, 0.96875)
(8, 4, 8, 254, 0.9921875, 'intermediate', 17, 0.984375)
(8, 4, 8, 254, 0.9921875)
(9, 4, 8, 254, 0.9921875, 'intermediate', 5, 0.96875)
(9, 4, 8, 256, 1.0)
(10, 4, 8, 248, 0.96875, 'intermediate', 2, 0.9609375)
(10, 4, 8, 252, 0.984375, 'intermediate', 7, 0.96875)
(10, 4, 8, 252, 0.984375)
(11, 4, 8, 250, 0.9765625, 'intermediate', 7, 0.96875)
(11, 4, 8, 250, 0.9765625)
(12, 4, 8, 244, 0.953125, 'intermediate', 7, 0.9296875)
(12, 4, 8, 246, 0.9609375, 'intermediate', 11, 0.953125)
(12, 4, 8, 246, 0.9609375)
(13, 4, 8, 232, 0.90625, 'intermediate', 1, 0.8828125)
(13, 4, 8, 238, 0.9296875, 'intermediate', 2, 0.90625)
(13, 4, 8, 240, 0.9375, 'intermediate', 10, 0.9296875)
(13, 4, 8, 242, 0.9453125, 'intermediate', 11, 0.9375)
(13, 4, 8, 244, 0.953125, 'intermediate', 12, 0.9453125)
(13, 4, 8, 246, 0.9609375, 'intermediate', 17, 0.953125)
(13, 4, 8, 246, 0.9609375)
(14, 4, 8, 240, 0.9375, 'intermediate', 12, 0.9296875)
(14, 4, 8, 240, 0.9375)
(15, 4, 8, 240, 0.9375, 'intermediate', 1, 0.875)
(15, 4, 8, 240, 0.9375)
(16, 4, 8, 228, 0.890625)
KVC(0.9): (15, 4, 8)

done

('n', 'k', 'h', 'successful classifications', 'rate')
(1, 5, 2, 2, 1.0)
(2, 5, 2, 4, 1.0)
(3, 5, 2, 8, 1.0)
(4, 5, 2, 16, 1.0)
(5, 5, 2, 32, 1.0)
(6, 5, 2, 64, 1.0)
(7, 5, 2, 128, 1.0)
(8, 5, 2, 252, 0.984375, 'intermediate', 1, 0.96875)
(8, 5, 2, 252, 0.984375)
(9, 5, 2, 250, 0.9765625, 'intermediate', 1, 0.9375)
(9, 5, 2, 250, 0.9765625)
(10, 5, 2, 246, 0.9609375, 'intermediate', 1, 0.90625)
(10, 5, 2, 246, 0.9609375)
(11, 5, 2, 220, 0.859375, 'intermediate', 1, 0.8046875)
(11, 5, 2, 224, 0.875, 'intermediate', 15, 0.859375)
(11, 5, 2, 224, 0.875)
VC(0.9): (10, 5, 2)

(1, 5, 3, 2, 1.0)
(2, 5, 3, 4, 1.0)
(3, 5, 3, 8, 1.0)
(4, 5, 3, 16, 1.0)
(5, 5, 3, 32, 1.0)
(6, 5, 3, 64, 1.0)
(7, 5, 3, 128, 1.0)
(8, 5, 3, 254, 0.9921875, 'intermediate', 1, 0.984375)
(8, 5, 3, 256, 1.0)
(9, 5, 3, 252, 0.984375, 'intermediate', 3, 0.9765625)
(9, 5, 3, 256, 1.0)
(10, 5, 3, 250, 0.9765625, 'intermediate', 11, 0.96875)
(10, 5, 3, 252, 0.984375, 'intermediate', 13, 0.9765625)
(10, 5, 3, 252, 0.984375)
(11, 5, 3, 244, 0.953125, 'intermediate', 1, 0.9140625)
(11, 5, 3, 244, 0.953125)
(12, 5, 3, 238, 0.9296875, 'intermediate', 11, 0.921875)
(12, 5, 3, 238, 0.9296875)
(13, 5, 3, 230, 0.8984375, 'intermediate', 5, 0.890625)
(13, 5, 3, 236, 0.921875, 'intermediate', 19, 0.8984375)
(13, 5, 3, 236, 0.921875)
(14, 5, 3, 222, 0.8671875, 'intermediate', 1, 0.8515625)
(14, 5, 3, 226, 0.8828125, 'intermediate', 8, 0.8671875)
(14, 5, 3, 226, 0.8828125)
VC(0.9): (13, 5, 3)

(1, 5, 4, 2, 1.0)
(2, 5, 4, 4, 1.0)
(3, 5, 4, 8, 1.0)
(4, 5, 4, 16, 1.0)
(5, 5, 4, 32, 1.0)
(6, 5, 4, 64, 1.0)
(7, 5, 4, 128, 1.0)
(8, 5, 4, 256, 1.0)
(9, 5, 4, 252, 0.984375, 'intermediate', 1, 0.9609375)
(9, 5, 4, 254, 0.9921875, 'intermediate', 7, 0.984375)
(9, 5, 4, 256, 1.0)
(10, 5, 4, 246, 0.9609375, 'intermediate', 1, 0.9453125)
(10, 5, 4, 248, 0.96875, 'intermediate', 3, 0.9609375)
(10, 5, 4, 252, 0.984375, 'intermediate', 4, 0.96875)
(10, 5, 4, 252, 0.984375)
(11, 5, 4, 246, 0.9609375, 'intermediate', 1, 0.859375)
(11, 5, 4, 248, 0.96875, 'intermediate', 5, 0.9609375)
(11, 5, 4, 248, 0.96875)
(12, 5, 4, 238, 0.9296875, 'intermediate', 1, 0.8828125)
(12, 5, 4, 242, 0.9453125, 'intermediate', 7, 0.9296875)
(12, 5, 4, 242, 0.9453125)
(13, 5, 4, 234, 0.9140625, 'intermediate', 1, 0.8828125)
(13, 5, 4, 240, 0.9375, 'intermediate', 17, 0.9140625)
(13, 5, 4, 240, 0.9375)
(14, 5, 4, 230, 0.8984375, 'intermediate', 1, 0.859375)
(14, 5, 4, 234, 0.9140625, 'intermediate', 3, 0.8984375)
(14, 5, 4, 234, 0.9140625)
(15, 5, 4, 220, 0.859375, 'intermediate', 1, 0.796875)
(15, 5, 4, 226, 0.8828125, 'intermediate', 8, 0.859375)
(15, 5, 4, 228, 0.890625, 'intermediate', 17, 0.8828125)
(15, 5, 4, 228, 0.890625)
VC(0.9): (14, 5, 4)

(1, 5, 5, 2, 1.0)
(2, 5, 5, 4, 1.0)
(3, 5, 5, 8, 1.0)
(4, 5, 5, 16, 1.0)
(5, 5, 5, 32, 1.0)
(6, 5, 5, 64, 1.0)
(7, 5, 5, 128, 1.0)
(8, 5, 5, 256, 1.0)
(9, 5, 5, 256, 1.0)
(10, 5, 5, 256, 1.0)
(11, 5, 5, 254, 0.9921875, 'intermediate', 1, 0.96875)
(11, 5, 5, 256, 1.0)
(12, 5, 5, 256, 1.0)
(13, 5, 5, 252, 0.984375, 'intermediate', 1, 0.96875)
(13, 5, 5, 254, 0.9921875, 'intermediate', 5, 0.984375)
(13, 5, 5, 254, 0.9921875)
(14, 5, 5, 252, 0.984375, 'intermediate', 1, 0.9609375)
(14, 5, 5, 254, 0.9921875, 'intermediate', 17, 0.984375)
(14, 5, 5, 254, 0.9921875)
(15, 5, 5, 244, 0.953125, 'intermediate', 1, 0.9453125)
(15, 5, 5, 246, 0.9609375, 'intermediate', 5, 0.953125)
(15, 5, 5, 248, 0.96875, 'intermediate', 16, 0.9609375)
(15, 5, 5, 248, 0.96875)
(16, 5, 5, 244, 0.953125, 'intermediate', 1, 0.9296875)
(16, 5, 5, 244, 0.953125)
(17, 5, 5, 242, 0.9453125, 'intermediate', 17, 0.9296875)
(17, 5, 5, 242, 0.9453125)
(18, 5, 5, 238, 0.9296875, 'intermediate', 1, 0.9140625)
(18, 5, 5, 238, 0.9296875)
(19, 5, 5, 232, 0.90625, 'intermediate', 1, 0.859375)
(19, 5, 5, 234, 0.9140625, 'intermediate', 17, 0.90625)
(19, 5, 5, 234, 0.9140625)
(20, 5, 5, 224, 0.875, 'intermediate', 1, 0.796875)
(20, 5, 5, 224, 0.875)
VC(0.9): (19, 5, 5)

(1, 5, 6, 2, 1.0)
(2, 5, 6, 4, 1.0)
(3, 5, 6, 8, 1.0)
(4, 5, 6, 16, 1.0)
(5, 5, 6, 32, 1.0)
(6, 5, 6, 64, 1.0)
(7, 5, 6, 128, 1.0)
(8, 5, 6, 256, 1.0)
(9, 5, 6, 256, 1.0)
(10, 5, 6, 256, 1.0)
(11, 5, 6, 256, 1.0)
(12, 5, 6, 256, 1.0)
(13, 5, 6, 256, 1.0)
(14, 5, 6, 254, 0.9921875, 'intermediate', 1, 0.96875)
(14, 5, 6, 254, 0.9921875)
(15, 5, 6, 252, 0.984375, 'intermediate', 1, 0.9765625)
(15, 5, 6, 252, 0.984375)
(16, 5, 6, 248, 0.96875, 'intermediate', 1, 0.9375)
(16, 5, 6, 248, 0.96875)
(17, 5, 6, 244, 0.953125, 'intermediate', 1, 0.9296875)
(17, 5, 6, 248, 0.96875, 'intermediate', 8, 0.953125)
(17, 5, 6, 248, 0.96875)
(18, 5, 6, 244, 0.953125, 'intermediate', 1, 0.9375)
(18, 5, 6, 244, 0.953125)
(19, 5, 6, 238, 0.9296875, 'intermediate', 1, 0.90625)
(19, 5, 6, 242, 0.9453125, 'intermediate', 11, 0.9296875)
(19, 5, 6, 242, 0.9453125)
(20, 5, 6, 234, 0.9140625)
(21, 5, 6, 224, 0.875, 'intermediate', 2, 0.8515625)
(21, 5, 6, 228, 0.890625, 'intermediate', 5, 0.875)
(21, 5, 6, 228, 0.890625)
VC(0.9): (20, 5, 6)

(1, 5, 7, 2, 1.0)
(2, 5, 7, 4, 1.0)
(3, 5, 7, 8, 1.0)
(4, 5, 7, 16, 1.0)
(5, 5, 7, 32, 1.0)
(6, 5, 7, 64, 1.0)
(7, 5, 7, 126, 0.984375, 'intermediate', 1, 0.953125)
(7, 5, 7, 128, 1.0)
(8, 5, 7, 248, 0.96875, 'intermediate', 1, 0.921875)
(8, 5, 7, 254, 0.9921875, 'intermediate', 3, 0.96875)
(8, 5, 7, 254, 0.9921875)
(9, 5, 7, 242, 0.9453125, 'intermediate', 1, 0.8984375)
(9, 5, 7, 246, 0.9609375, 'intermediate', 2, 0.9453125)
(9, 5, 7, 256, 1.0)
(10, 5, 7, 250, 0.9765625, 'intermediate', 3, 0.9375)
(10, 5, 7, 252, 0.984375, 'intermediate', 4, 0.9765625)
(10, 5, 7, 252, 0.984375)
(11, 5, 7, 250, 0.9765625, 'intermediate', 1, 0.875)
(11, 5, 7, 250, 0.9765625)
(12, 5, 7, 234, 0.9140625, 'intermediate', 1, 0.8515625)
(12, 5, 7, 236, 0.921875, 'intermediate', 2, 0.9140625)
(12, 5, 7, 242, 0.9453125, 'intermediate', 3, 0.921875)
(12, 5, 7, 246, 0.9609375, 'intermediate', 7, 0.9453125)
(12, 5, 7, 246, 0.9609375)
(13, 5, 7, 232, 0.90625, 'intermediate', 1, 0.890625)
(13, 5, 7, 236, 0.921875, 'intermediate', 2, 0.90625)
(13, 5, 7, 240, 0.9375, 'intermediate', 3, 0.921875)
(13, 5, 7, 240, 0.9375)
(14, 5, 7, 232, 0.90625, 'intermediate', 1, 0.8828125)
(14, 5, 7, 240, 0.9375, 'intermediate', 3, 0.90625)
(14, 5, 7, 242, 0.9453125, 'intermediate', 17, 0.9375)
(14, 5, 7, 242, 0.9453125)
(15, 5, 7, 234, 0.9140625, 'intermediate', 1, 0.8203125)
(15, 5, 7, 236, 0.921875, 'intermediate', 3, 0.9140625)
(15, 5, 7, 236, 0.921875)
(16, 5, 7, 216, 0.84375, 'intermediate', 1, 0.7734375)
(16, 5, 7, 234, 0.9140625, 'intermediate', 3, 0.84375)
(16, 5, 7, 236, 0.921875, 'intermediate', 19, 0.9140625)
(16, 5, 7, 236, 0.921875)
(17, 5, 7, 218, 0.8515625, 'intermediate', 1, 0.7578125)
(17, 5, 7, 224, 0.875, 'intermediate', 3, 0.8515625)
(17, 5, 7, 226, 0.8828125, 'intermediate', 11, 0.875)
(17, 5, 7, 226, 0.8828125)
VC(0.9): (16, 5, 7)

(1, 5, 8, 2, 1.0)
(2, 5, 8, 4, 1.0)
(3, 5, 8, 8, 1.0)
(4, 5, 8, 16, 1.0)
(5, 5, 8, 32, 1.0)
(6, 5, 8, 64, 1.0)
(7, 5, 8, 128, 1.0)
(8, 5, 8, 256, 1.0)
(9, 5, 8, 256, 1.0)
(10, 5, 8, 256, 1.0)
(11, 5, 8, 256, 1.0)
(12, 5, 8, 254, 0.9921875, 'intermediate', 7, 0.984375)
(12, 5, 8, 256, 1.0)
(13, 5, 8, 254, 0.9921875, 'intermediate', 4, 0.984375)
(13, 5, 8, 254, 0.9921875)
(14, 5, 8, 254, 0.9921875, 'intermediate', 17, 0.984375)
(14, 5, 8, 254, 0.9921875)
(15, 5, 8, 254, 0.9921875, 'intermediate', 1, 0.984375)



import itertools
import numpy
import random
from sklearn.neural_network import MLPClassifier

results = []
print("n","k","h","successful classifications", "rate")
for k in K:
    numpy.random.seed(0)
    # print data
    for h in H:
        numpy.random.seed(0)
        for n in range(N):
            n += 1
            data_results = []
            for r_data in range(20):
                numpy.random.seed(r_data)
                if False: #k == 1:
                    data = [[d] for d in range(N)]
                else:
                    data = numpy.random.uniform(size=[N,k])
                numpy.random.seed(0)
                true_results = 0
                if n <= 8:
                    labellist = ["".join(item) for item in itertools.product("10", repeat=n)]
                else:
                    labellist = [bin(numpy.random.randint(2**(N+2)+1, 2**(N+2)+1+2**n))[-n:] for i in range(256)]
                for labelstring in labellist:
                    labels = [int(i) for i in labelstring]
                    d = data[:n]
                    for r_mlp in range(10): #lbfgs
                        clf = MLPClassifier(
                            hidden_layer_sizes=(h,2), random_state=r_mlp, 
                            #activation='relu', solver="lbfgs",
                            activation='relu', solver="lbfgs",
                            alpha=0)
                        #clf = MLPClassifier(hidden_layer_sizes=(1,), random_state=r, activation='identity', solver="lbfgs")
                        clf.fit(d, labels)
                        if (clf.predict(d) == labels).all():
                            true_results += 1
                            break
                # true_results are always an even number!
                true_results += true_results % 2
                if true_results == 2**min(n,8):
                    data_results.append(true_results)
                    break
                if data_results and true_results > max(data_results):
                    print(n, k, h, true_results, true_results*1.0/2**min(n,8), "intermediate", r_data, max(data_results)*1.0/2**min(n,8))
                data_results.append(true_results)
            true_results = max(data_results)
            print(n, k, h, true_results, true_results*1.0/2**min(n,8))
            results.append((n, k, h, true_results, true_results*1.0/2**min(n,8)))
            if true_results*1.0/2**min(n,8) < 0.9:
                print "VC(0.9): "+str((n-1,k, h))
                print
                break
    print "done"