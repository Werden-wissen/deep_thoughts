k	h	eMK
1	1	4
	2	6
	3	8
	4	9
	5	10
	6	11
	7	12
	8	13
2	1	6
	2	11
	3	15
	4	19
	5	22
	6	27
	7	30
	8	34
3	1	8
	2	16
	3	22
	4	29
	5	35
	6	43
	7	51
	8	57
4	1	10
	2	19
	3	29
	4	38
	5	49
	6	58
	7	70
	8	80
5	1	12
	2	25
	3	36
	4	49
	5	60
	6	60
	7	60
	8	60


('n', 'k', 'h', 'successful classifications', 'rate')
(3, 1, 1, 2, 0.5)
(4, 1, 1, 4, 0.5)
(5, 1, 1, 5, 0.3125)
KVC(0.95): (4, 1, 1)

(3, 1, 2, 2, 0.5)
(4, 1, 2, 4, 0.5)
(5, 1, 2, 8, 0.5)
(6, 1, 2, 16, 0.5)
(7, 1, 2, 22, 0.34375)
KVC(0.95): (6, 1, 2)

(3, 1, 3, 2, 0.5)
(4, 1, 3, 4, 0.5)
(5, 1, 3, 8, 0.5)
(6, 1, 3, 16, 0.5)
(7, 1, 3, 32, 0.5)
(8, 1, 3, 64, 0.5)
(9, 1, 3, 103, 0.40234375, 'intermediate', 6, 0.359375)
(9, 1, 3, 103, 0.40234375)
KVC(0.95): (8, 1, 3)

(3, 1, 4, 2, 0.5)
(4, 1, 4, 4, 0.5)
(5, 1, 4, 8, 0.5)
(6, 1, 4, 16, 0.5)
(7, 1, 4, 32, 0.5)
(8, 1, 4, 64, 0.5)
(9, 1, 4, 128, 0.5)
(10, 1, 4, 196, 0.3828125, 'intermediate', 1, 0.328125)
(10, 1, 4, 206, 0.40234375, 'intermediate', 6, 0.3828125)
(10, 1, 4, 210, 0.41015625, 'intermediate', 12, 0.40234375)
(10, 1, 4, 210, 0.41015625)
KVC(0.95): (9, 1, 4)

(3, 1, 5, 2, 0.5)
(4, 1, 5, 4, 0.5)
(5, 1, 5, 8, 0.5)
(6, 1, 5, 16, 0.5)
(7, 1, 5, 32, 0.5)
(8, 1, 5, 64, 0.5)
(9, 1, 5, 128, 0.5)
(10, 1, 5, 256, 0.5)
(11, 1, 5, 219, 0.427734375, 'intermediate', 1, 0.2421875)
(11, 1, 5, 233, 0.455078125, 'intermediate', 6, 0.427734375)
(11, 1, 5, 233, 0.455078125)
(12, 1, 5, 194, 0.37890625, 'intermediate', 1, 0.244140625)
(12, 1, 5, 194, 0.37890625)
KVC(0.95): (11, 1, 5)

(3, 1, 6, 2, 0.5)
(4, 1, 6, 4, 0.5)
(5, 1, 6, 8, 0.5)
(6, 1, 6, 16, 0.5)
(7, 1, 6, 32, 0.5)
(8, 1, 6, 64, 0.5)
(9, 1, 6, 128, 0.5)
(10, 1, 6, 256, 0.5)
(11, 1, 6, 224, 0.4375, 'intermediate', 1, 0.294921875)
(11, 1, 6, 256, 0.5)
(12, 1, 6, 208, 0.40625, 'intermediate', 1, 0.263671875)
(12, 1, 6, 224, 0.4375, 'intermediate', 6, 0.40625)
(12, 1, 6, 224, 0.4375)
KVC(0.95): (11, 1, 6)

(3, 1, 7, 2, 0.5)
(4, 1, 7, 4, 0.5)
(5, 1, 7, 8, 0.5)
(6, 1, 7, 16, 0.5)
(7, 1, 7, 32, 0.5)
(8, 1, 7, 64, 0.5)
(9, 1, 7, 128, 0.5)
(10, 1, 7, 256, 0.5)
(11, 1, 7, 256, 0.5)
(12, 1, 7, 245, 0.478515625, 'intermediate', 1, 0.31640625)
(12, 1, 7, 256, 0.5)
(13, 1, 7, 186, 0.36328125, 'intermediate', 1, 0.263671875)
(13, 1, 7, 191, 0.373046875, 'intermediate', 6, 0.36328125)
(13, 1, 7, 191, 0.373046875)
KVC(0.95): (12, 1, 7)

(3, 1, 8, 2, 0.5)
(4, 1, 8, 4, 0.5)
(5, 1, 8, 8, 0.5)
(6, 1, 8, 16, 0.5)
(7, 1, 8, 32, 0.5)
(8, 1, 8, 64, 0.5)
(9, 1, 8, 128, 0.5)
(10, 1, 8, 256, 0.5)
(11, 1, 8, 256, 0.5)
(12, 1, 8, 256, 0.5)
(13, 1, 8, 249, 0.486328125, 'intermediate', 1, 0.310546875)
(13, 1, 8, 256, 0.5)
(14, 1, 8, 170, 0.33203125, 'intermediate', 1, 0.287109375)
(14, 1, 8, 204, 0.3984375, 'intermediate', 2, 0.33203125)
(14, 1, 8, 222, 0.43359375, 'intermediate', 6, 0.3984375)
(14, 1, 8, 222, 0.43359375)
KVC(0.95): (13, 1, 8)

done

('n', 'k', 'h', 'successful classifications', 'rate')
(4, 2, 1, 4, 0.5)
(5, 2, 1, 8, 0.5)
(6, 2, 1, 16, 0.5)
(7, 2, 1, 22, 0.34375)
KVC(0.95): (6, 2, 1)

(6, 2, 2, 16, 0.5)
(7, 2, 2, 32, 0.5)
(8, 2, 2, 64, 0.5)
(9, 2, 2, 128, 0.5)
(10, 2, 2, 256, 0.5)
(11, 2, 2, 241, 0.470703125, 'intermediate', 1, 0.404296875)
(11, 2, 2, 256, 0.5)
(12, 2, 2, 186, 0.36328125, 'intermediate', 1, 0.359375)
(12, 2, 2, 195, 0.380859375, 'intermediate', 4, 0.36328125)
(12, 2, 2, 195, 0.380859375)
KVC(0.95): (11, 2, 2)

(8, 2, 3, 64, 0.5)
(9, 2, 3, 128, 0.5)
(10, 2, 3, 256, 0.5)
(11, 2, 3, 256, 0.5)
(12, 2, 3, 256, 0.5)
(13, 2, 3, 256, 0.5)
(14, 2, 3, 256, 0.5)
(15, 2, 3, 256, 0.5)
(16, 2, 3, 187, 0.365234375, 'intermediate', 1, 0.357421875)
(16, 2, 3, 194, 0.37890625, 'intermediate', 4, 0.365234375)
(16, 2, 3, 202, 0.39453125, 'intermediate', 6, 0.37890625)
(16, 2, 3, 235, 0.458984375, 'intermediate', 8, 0.39453125)
(16, 2, 3, 236, 0.4609375, 'intermediate', 12, 0.458984375)
(16, 2, 3, 236, 0.4609375)
(17, 2, 3, 162, 0.31640625, 'intermediate', 3, 0.306640625)
(17, 2, 3, 180, 0.3515625, 'intermediate', 6, 0.31640625)
(17, 2, 3, 180, 0.3515625)
KVC(0.95): (16, 2, 3)

(10, 2, 4, 256, 0.5)
(11, 2, 4, 256, 0.5)
(12, 2, 4, 256, 0.5)
(13, 2, 4, 256, 0.5)
(14, 2, 4, 256, 0.5)
(15, 2, 4, 256, 0.5)
(16, 2, 4, 256, 0.5)
(17, 2, 4, 256, 0.5)
(18, 2, 4, 256, 0.5)
(19, 2, 4, 232, 0.453125, 'intermediate', 1, 0.44140625)
(19, 2, 4, 250, 0.48828125, 'intermediate', 6, 0.453125)
(19, 2, 4, 256, 0.5)
(20, 2, 4, 214, 0.41796875, 'intermediate', 3, 0.3984375)
(20, 2, 4, 215, 0.419921875, 'intermediate', 7, 0.41796875)
(20, 2, 4, 217, 0.423828125, 'intermediate', 8, 0.419921875)
(20, 2, 4, 232, 0.453125, 'intermediate', 9, 0.423828125)
(20, 2, 4, 232, 0.453125)
(21, 2, 4, 190, 0.37109375, 'intermediate', 8, 0.361328125)
(21, 2, 4, 190, 0.37109375)
KVC(0.95): (20, 2, 4)

(12, 2, 5, 256, 0.5)
(13, 2, 5, 256, 0.5)
(14, 2, 5, 256, 0.5)
(15, 2, 5, 256, 0.5)
(16, 2, 5, 256, 0.5)
(17, 2, 5, 256, 0.5)
(18, 2, 5, 256, 0.5)
(19, 2, 5, 256, 0.5)
(20, 2, 5, 256, 0.5)
(21, 2, 5, 256, 0.5)
(22, 2, 5, 256, 0.5)
(23, 2, 5, 240, 0.46875, 'intermediate', 6, 0.435546875)
(23, 2, 5, 245, 0.478515625, 'intermediate', 7, 0.46875)
(23, 2, 5, 245, 0.478515625)
(24, 2, 5, 217, 0.423828125)
KVC(0.95): (23, 2, 5)

(14, 2, 6, 256, 0.5)
(15, 2, 6, 256, 0.5)
(16, 2, 6, 256, 0.5)
(17, 2, 6, 256, 0.5)
(18, 2, 6, 256, 0.5)
(19, 2, 6, 256, 0.5)
(20, 2, 6, 256, 0.5)
(21, 2, 6, 256, 0.5)
(22, 2, 6, 256, 0.5)
(23, 2, 6, 256, 0.5)
(24, 2, 6, 256, 0.5)
(25, 2, 6, 256, 0.5)
(26, 2, 6, 256, 0.5)
(27, 2, 6, 256, 0.5)
(28, 2, 6, 200, 0.390625, 'intermediate', 7, 0.3828125)
(28, 2, 6, 205, 0.400390625, 'intermediate', 8, 0.390625)
(28, 2, 6, 208, 0.40625, 'intermediate', 12, 0.400390625)
(28, 2, 6, 208, 0.40625)
KVC(0.95): (27, 2, 6)

(16, 2, 7, 256, 0.5)
(17, 2, 7, 256, 0.5)
(18, 2, 7, 256, 0.5)
(19, 2, 7, 256, 0.5)
(20, 2, 7, 256, 0.5)
(21, 2, 7, 256, 0.5)
(22, 2, 7, 256, 0.5)
(23, 2, 7, 256, 0.5)
(24, 2, 7, 256, 0.5)
(25, 2, 7, 256, 0.5)
(26, 2, 7, 256, 0.5)
(27, 2, 7, 256, 0.5)
(28, 2, 7, 256, 0.5)
(29, 2, 7, 256, 0.5)
(30, 2, 7, 256, 0.5)
(31, 2, 7, 177, 0.345703125, 'intermediate', 6, 0.337890625)
(31, 2, 7, 188, 0.3671875, 'intermediate', 7, 0.345703125)
(31, 2, 7, 229, 0.447265625, 'intermediate', 8, 0.3671875)
(31, 2, 7, 229, 0.447265625)
KVC(0.95): (30, 2, 7)

(18, 2, 8, 256, 0.5)
(19, 2, 8, 256, 0.5)
(20, 2, 8, 256, 0.5)
(21, 2, 8, 256, 0.5)
(22, 2, 8, 256, 0.5)
(23, 2, 8, 256, 0.5)
(24, 2, 8, 256, 0.5)
(25, 2, 8, 256, 0.5)
(26, 2, 8, 256, 0.5)
(27, 2, 8, 256, 0.5)
(28, 2, 8, 256, 0.5)
(29, 2, 8, 256, 0.5)
(30, 2, 8, 256, 0.5)
(31, 2, 8, 255, 0.498046875, 'intermediate', 3, 0.49609375)
(31, 2, 8, 256, 0.5)
(32, 2, 8, 256, 0.5)
(33, 2, 8, 211, 0.412109375, 'intermediate', 3, 0.3984375)
(33, 2, 8, 243, 0.474609375, 'intermediate', 7, 0.412109375)
(33, 2, 8, 256, 0.5)
(34, 2, 8, 218, 0.42578125, 'intermediate', 7, 0.37109375)
(34, 2, 8, 240, 0.46875, 'intermediate', 8, 0.42578125)
(34, 2, 8, 251, 0.490234375, 'intermediate', 9, 0.46875)
(34, 2, 8, 251, 0.490234375)
(35, 2, 8, 172, 0.3359375, 'intermediate', 6, 0.31640625)
(35, 2, 8, 200, 0.390625, 'intermediate', 7, 0.3359375)
(35, 2, 8, 208, 0.40625, 'intermediate', 8, 0.390625)
(35, 2, 8, 233, 0.455078125, 'intermediate', 9, 0.40625)
(35, 2, 8, 233, 0.455078125)
(36, 2, 8, 167, 0.326171875, 'intermediate', 7, 0.298828125)
(36, 2, 8, 196, 0.3828125, 'intermediate', 8, 0.326171875)
(36, 2, 8, 196, 0.3828125)
KVC(0.95): (35, 2, 8)

done

('n', 'k', 'h', 'successful classifications', 'rate')
(5, 3, 1, 8, 0.5)
(6, 3, 1, 16, 0.5)
(7, 3, 1, 32, 0.5)
(8, 3, 1, 64, 0.5)
(9, 3, 1, 93, 0.36328125, 'intermediate', 6, 0.359375)
(9, 3, 1, 93, 0.36328125)
KVC(0.95): (8, 3, 1)

(9, 3, 2, 128, 0.5)
(10, 3, 2, 256, 0.5)
(11, 3, 2, 256, 0.5)
(12, 3, 2, 256, 0.5)
(13, 3, 2, 256, 0.5)
(14, 3, 2, 256, 0.5)
(15, 3, 2, 256, 0.5)
(16, 3, 2, 256, 0.5)
(17, 3, 2, 173, 0.337890625, 'intermediate', 1, 0.3046875)
(17, 3, 2, 214, 0.41796875, 'intermediate', 13, 0.337890625)
(17, 3, 2, 214, 0.41796875)
KVC(0.95): (16, 3, 2)

(13, 3, 3, 256, 0.5)
(14, 3, 3, 256, 0.5)
(15, 3, 3, 256, 0.5)
(16, 3, 3, 256, 0.5)
(17, 3, 3, 256, 0.5)
(18, 3, 3, 256, 0.5)
(19, 3, 3, 256, 0.5)
(20, 3, 3, 256, 0.5)
(21, 3, 3, 256, 0.5)
(22, 3, 3, 256, 0.5)
(23, 3, 3, 248, 0.484375, 'intermediate', 8, 0.466796875)
(23, 3, 3, 248, 0.484375)
(24, 3, 3, 208, 0.40625, 'intermediate', 5, 0.376953125)
(24, 3, 3, 208, 0.40625)
KVC(0.95): (23, 3, 3)

(17, 3, 4, 256, 0.5)
(18, 3, 4, 256, 0.5)
(19, 3, 4, 256, 0.5)
(20, 3, 4, 256, 0.5)
(21, 3, 4, 256, 0.5)
(22, 3, 4, 256, 0.5)
(23, 3, 4, 256, 0.5)
(24, 3, 4, 256, 0.5)
(25, 3, 4, 256, 0.5)
(26, 3, 4, 256, 0.5)
(27, 3, 4, 256, 0.5)
(28, 3, 4, 256, 0.5)
(29, 3, 4, 256, 0.5)
(30, 3, 4, 216, 0.421875, 'intermediate', 5, 0.404296875)
(30, 3, 4, 225, 0.439453125, 'intermediate', 7, 0.421875)
(30, 3, 4, 225, 0.439453125)
KVC(0.95): (29, 3, 4)

(21, 3, 5, 256, 0.5)
(22, 3, 5, 256, 0.5)
(23, 3, 5, 256, 0.5)
(24, 3, 5, 256, 0.5)
(25, 3, 5, 256, 0.5)
(26, 3, 5, 256, 0.5)
(27, 3, 5, 256, 0.5)
(28, 3, 5, 256, 0.5)
(29, 3, 5, 256, 0.5)
(30, 3, 5, 256, 0.5)
(31, 3, 5, 256, 0.5)
(32, 3, 5, 256, 0.5)
(33, 3, 5, 256, 0.5)
(34, 3, 5, 256, 0.5)
(35, 3, 5, 256, 0.5)
(36, 3, 5, 238, 0.46484375, 'intermediate', 2, 0.43359375)
(36, 3, 5, 249, 0.486328125, 'intermediate', 18, 0.46484375)
(36, 3, 5, 249, 0.486328125)
(37, 3, 5, 211, 0.412109375, 'intermediate', 7, 0.3984375)
(37, 3, 5, 213, 0.416015625, 'intermediate', 12, 0.412109375)
(37, 3, 5, 217, 0.423828125, 'intermediate', 18, 0.416015625)
(37, 3, 5, 217, 0.423828125)
KVC(0.95): (36, 3, 5)

(25, 3, 6, 256, 0.5)
(26, 3, 6, 256, 0.5)
(27, 3, 6, 256, 0.5)
(28, 3, 6, 256, 0.5)
(29, 3, 6, 256, 0.5)
(30, 3, 6, 256, 0.5)
(31, 3, 6, 256, 0.5)
(32, 3, 6, 256, 0.5)
(33, 3, 6, 256, 0.5)
(34, 3, 6, 256, 0.5)
(35, 3, 6, 256, 0.5)
(36, 3, 6, 256, 0.5)
(37, 3, 6, 256, 0.5)
(38, 3, 6, 256, 0.5)
(39, 3, 6, 256, 0.5)
(40, 3, 6, 256, 0.5)
(41, 3, 6, 256, 0.5)
(42, 3, 6, 256, 0.5)
(43, 3, 6, 256, 0.5)
(44, 3, 6, 233, 0.455078125, 'intermediate', 3, 0.421875)
(44, 3, 6, 241, 0.470703125, 'intermediate', 8, 0.455078125)
(44, 3, 6, 241, 0.470703125)
(45, 3, 6, 210, 0.41015625, 'intermediate', 3, 0.37890625)
(45, 3, 6, 213, 0.416015625, 'intermediate', 17, 0.41015625)
(45, 3, 6, 213, 0.416015625)
KVC(0.95): (44, 3, 6)

(29, 3, 7, 256, 0.5)
(30, 3, 7, 256, 0.5)
(31, 3, 7, 256, 0.5)
(32, 3, 7, 256, 0.5)
(33, 3, 7, 256, 0.5)
(34, 3, 7, 256, 0.5)
(35, 3, 7, 256, 0.5)
(36, 3, 7, 256, 0.5)
(37, 3, 7, 256, 0.5)
(38, 3, 7, 256, 0.5)
(39, 3, 7, 256, 0.5)
(40, 3, 7, 256, 0.5)
(41, 3, 7, 256, 0.5)
(42, 3, 7, 256, 0.5)
(43, 3, 7, 256, 0.5)
(44, 3, 7, 256, 0.5)
(45, 3, 7, 256, 0.5)
(46, 3, 7, 256, 0.5)
(47, 3, 7, 256, 0.5)
(48, 3, 7, 256, 0.5)
(49, 3, 7, 256, 0.5)
(50, 3, 7, 238, 0.46484375, 'intermediate', 3, 0.44921875)
(50, 3, 7, 256, 0.5)
(51, 3, 7, 255, 0.498046875, 'intermediate', 8, 0.486328125)
(51, 3, 7, 255, 0.498046875)
(52, 3, 7, 207, 0.404296875)
KVC(0.95): (51, 3, 7)

(33, 3, 8, 256, 0.5)
(34, 3, 8, 256, 0.5)
(35, 3, 8, 256, 0.5)
(36, 3, 8, 256, 0.5)
(37, 3, 8, 256, 0.5)
(38, 3, 8, 256, 0.5)
(39, 3, 8, 256, 0.5)
(40, 3, 8, 256, 0.5)
(41, 3, 8, 256, 0.5)
(42, 3, 8, 256, 0.5)
(43, 3, 8, 256, 0.5)
(44, 3, 8, 256, 0.5)
(45, 3, 8, 256, 0.5)
(46, 3, 8, 256, 0.5)
(47, 3, 8, 256, 0.5)
(48, 3, 8, 256, 0.5)
(49, 3, 8, 256, 0.5)
(50, 3, 8, 256, 0.5)
(51, 3, 8, 256, 0.5)
(52, 3, 8, 256, 0.5)
(53, 3, 8, 256, 0.5)
(54, 3, 8, 256, 0.5)
(55, 3, 8, 256, 0.5)
(56, 3, 8, 240, 0.46875, 'intermediate', 3, 0.447265625)
(56, 3, 8, 256, 0.5)
(57, 3, 8, 251, 0.490234375, 'intermediate', 3, 0.42578125)
(57, 3, 8, 251, 0.490234375)
(58, 3, 8, 223, 0.435546875, 'intermediate', 8, 0.392578125)
(58, 3, 8, 223, 0.435546875)
KVC(0.95): (57, 3, 8)

done

('n', 'k', 'h', 'successful classifications', 'rate')
(6, 4, 1, 16, 0.5)
(7, 4, 1, 32, 0.5)
(8, 4, 1, 64, 0.5)
(9, 4, 1, 128, 0.5)
(10, 4, 1, 253, 0.494140625, 'intermediate', 1, 0.4921875)
(10, 4, 1, 256, 0.5)
(11, 4, 1, 200, 0.390625, 'intermediate', 3, 0.384765625)
(11, 4, 1, 208, 0.40625, 'intermediate', 13, 0.390625)
(11, 4, 1, 208, 0.40625)
KVC(0.95): (10, 4, 1)

(12, 4, 2, 256, 0.5)
(13, 4, 2, 256, 0.5)
(14, 4, 2, 256, 0.5)
(15, 4, 2, 256, 0.5)
(16, 4, 2, 256, 0.5)
(17, 4, 2, 256, 0.5)
(18, 4, 2, 256, 0.5)
(19, 4, 2, 251, 0.490234375, 'intermediate', 2, 0.48828125)
(19, 4, 2, 256, 0.5)
(20, 4, 2, 236, 0.4609375, 'intermediate', 1, 0.396484375)
(20, 4, 2, 242, 0.47265625, 'intermediate', 7, 0.4609375)
(20, 4, 2, 242, 0.47265625)
(21, 4, 2, 175, 0.341796875, 'intermediate', 4, 0.33984375)
(21, 4, 2, 183, 0.357421875, 'intermediate', 7, 0.341796875)
(21, 4, 2, 183, 0.357421875)
KVC(0.95): (20, 4, 2)

(18, 4, 3, 256, 0.5)
(19, 4, 3, 256, 0.5)
(20, 4, 3, 256, 0.5)
(21, 4, 3, 256, 0.5)
(22, 4, 3, 256, 0.5)
(23, 4, 3, 256, 0.5)
(24, 4, 3, 256, 0.5)
(25, 4, 3, 256, 0.5)
(26, 4, 3, 256, 0.5)
(27, 4, 3, 256, 0.5)
(28, 4, 3, 256, 0.5)
(29, 4, 3, 256, 0.5)
(30, 4, 3, 233, 0.455078125)
(31, 4, 3, 200, 0.390625, 'intermediate', 1, 0.341796875)
(31, 4, 3, 208, 0.40625, 'intermediate', 3, 0.390625)
(31, 4, 3, 217, 0.423828125, 'intermediate', 8, 0.40625)
(31, 4, 3, 217, 0.423828125)
KVC(0.95): (30, 4, 3)

(24, 4, 4, 256, 0.5)
(25, 4, 4, 256, 0.5)
(26, 4, 4, 256, 0.5)
(27, 4, 4, 256, 0.5)
(28, 4, 4, 256, 0.5)
(29, 4, 4, 256, 0.5)
(30, 4, 4, 256, 0.5)
(31, 4, 4, 256, 0.5)
(32, 4, 4, 256, 0.5)
(33, 4, 4, 256, 0.5)
(34, 4, 4, 256, 0.5)
(35, 4, 4, 256, 0.5)
(36, 4, 4, 256, 0.5)
(37, 4, 4, 256, 0.5)
(38, 4, 4, 256, 0.5)
(39, 4, 4, 237, 0.462890625, 'intermediate', 2, 0.39453125)
(39, 4, 4, 237, 0.462890625)
(40, 4, 4, 186, 0.36328125, 'intermediate', 1, 0.330078125)
(40, 4, 4, 191, 0.373046875, 'intermediate', 4, 0.36328125)
(40, 4, 4, 214, 0.41796875, 'intermediate', 5, 0.373046875)
(40, 4, 4, 216, 0.421875, 'intermediate', 6, 0.41796875)
(40, 4, 4, 216, 0.421875)
KVC(0.95): (39, 4, 4)

(30, 4, 5, 256, 0.5)
(31, 4, 5, 256, 0.5)
(32, 4, 5, 256, 0.5)
(33, 4, 5, 256, 0.5)
(34, 4, 5, 256, 0.5)
(35, 4, 5, 256, 0.5)
(36, 4, 5, 256, 0.5)
(37, 4, 5, 256, 0.5)
(38, 4, 5, 256, 0.5)
(39, 4, 5, 256, 0.5)
(40, 4, 5, 256, 0.5)
(41, 4, 5, 256, 0.5)
(42, 4, 5, 256, 0.5)
(43, 4, 5, 256, 0.5)
(44, 4, 5, 256, 0.5)
(45, 4, 5, 256, 0.5)
(46, 4, 5, 256, 0.5)
(47, 4, 5, 256, 0.5)
(48, 4, 5, 256, 0.5)
(49, 4, 5, 228, 0.4453125, 'intermediate', 2, 0.439453125)
(49, 4, 5, 229, 0.447265625, 'intermediate', 5, 0.4453125)
(49, 4, 5, 256, 0.5)
(50, 4, 5, 235, 0.458984375)
(51, 4, 5, 190, 0.37109375, 'intermediate', 5, 0.365234375)
(51, 4, 5, 191, 0.373046875, 'intermediate', 7, 0.37109375)
(51, 4, 5, 196, 0.3828125, 'intermediate', 9, 0.373046875)
(51, 4, 5, 196, 0.3828125)
KVC(0.95): (50, 4, 5)

(36, 4, 6, 256, 0.5)
(37, 4, 6, 256, 0.5)
(38, 4, 6, 256, 0.5)
(39, 4, 6, 256, 0.5)
(40, 4, 6, 256, 0.5)
(41, 4, 6, 256, 0.5)
(42, 4, 6, 256, 0.5)
(43, 4, 6, 256, 0.5)
(44, 4, 6, 256, 0.5)
(45, 4, 6, 256, 0.5)
(46, 4, 6, 256, 0.5)
(47, 4, 6, 256, 0.5)
(48, 4, 6, 256, 0.5)
(49, 4, 6, 256, 0.5)
(50, 4, 6, 256, 0.5)
(51, 4, 6, 256, 0.5)
(52, 4, 6, 256, 0.5)
(53, 4, 6, 256, 0.5)
(54, 4, 6, 256, 0.5)
(55, 4, 6, 256, 0.5)
(56, 4, 6, 256, 0.5)
(57, 4, 6, 256, 0.5)
(58, 4, 6, 256, 0.5)
(59, 4, 6, 221, 0.431640625, 'intermediate', 5, 0.4296875)
(59, 4, 6, 228, 0.4453125, 'intermediate', 9, 0.431640625)
(59, 4, 6, 231, 0.451171875, 'intermediate', 15, 0.4453125)
(59, 4, 6, 231, 0.451171875)
(60, 4, 6, 222, 0.43359375, 'intermediate', 2, 0.40234375)
(60, 4, 6, 222, 0.43359375)
KVC(0.95): (59, 4, 6)

(42, 4, 7, 256, 0.5)
(43, 4, 7, 256, 0.5)
(44, 4, 7, 256, 0.5)
(45, 4, 7, 256, 0.5)
(46, 4, 7, 256, 0.5)
(47, 4, 7, 256, 0.5)
(48, 4, 7, 256, 0.5)
(49, 4, 7, 256, 0.5)
(50, 4, 7, 256, 0.5)
(51, 4, 7, 256, 0.5)
(52, 4, 7, 256, 0.5)
(53, 4, 7, 256, 0.5)
(54, 4, 7, 256, 0.5)
(55, 4, 7, 256, 0.5)
(56, 4, 7, 256, 0.5)
(57, 4, 7, 256, 0.5)
(58, 4, 7, 256, 0.5)
(59, 4, 7, 256, 0.5)
(60, 4, 7, 256, 0.5)
('n', 'k', 'h', 'successful classifications', 'rate')
(60, 4, 7, 256, 0.5)
(61, 4, 7, 256, 0.5)
(62, 4, 7, 256, 0.5)
(63, 4, 7, 256, 0.5)
(64, 4, 7, 256, 0.5)
(65, 4, 7, 256, 0.5)
(66, 4, 7, 256, 0.5)
(67, 4, 7, 256, 0.5)
(68, 4, 7, 256, 0.5)
(69, 4, 7, 256, 0.5)
(70, 4, 7, 256, 0.5)
(71, 4, 7, 249, 0.486328125, 'intermediate', 2, 0.427734375)
(71, 4, 7, 249, 0.486328125)
(72, 4, 7, 199, 0.388671875, 'intermediate', 2, 0.349609375)


(48, 4, 8, 256, 0.5)
(49, 4, 8, 256, 0.5)
(50, 4, 8, 256, 0.5)
(51, 4, 8, 256, 0.5)
(52, 4, 8, 256, 0.5)
(53, 4, 8, 256, 0.5)
(54, 4, 8, 256, 0.5)
(55, 4, 8, 256, 0.5)
(56, 4, 8, 256, 0.5)
(57, 4, 8, 256, 0.5)
(58, 4, 8, 256, 0.5)
(59, 4, 8, 256, 0.5)
(60, 4, 8, 256, 0.5)
done
(60, 4, 8, 256, 0.5)
(61, 4, 8, 256, 0.5)
(62, 4, 8, 256, 0.5)
(63, 4, 8, 256, 0.5)
(64, 4, 8, 256, 0.5)
(65, 4, 8, 256, 0.5)
(66, 4, 8, 256, 0.5)
(67, 4, 8, 256, 0.5)
(68, 4, 8, 256, 0.5)
(69, 4, 8, 256, 0.5)
(70, 4, 8, 256, 0.5)
(71, 4, 8, 256, 0.5)
(72, 4, 8, 256, 0.5)
(73, 4, 8, 256, 0.5)
(74, 4, 8, 256, 0.5)
(75, 4, 8, 256, 0.5)
(76, 4, 8, 256, 0.5)
(77, 4, 8, 256, 0.5)
(78, 4, 8, 256, 0.5)
(79, 4, 8, 256, 0.5)
(80, 4, 8, 256, 0.5)
(81, 4, 8, 244, 0.4765625, 'intermediate', 2, 0.412109375)
(81, 4, 8, 244, 0.4765625)
(82, 4, 8, 212, 0.4140625, 'intermediate', 2, 0.380859375)


('n', 'k', 'h', 'successful classifications', 'rate')
(7, 5, 1, 32, 0.5)
(8, 5, 1, 64, 0.5)
(9, 5, 1, 128, 0.5)
(10, 5, 1, 256, 0.5)
(11, 5, 1, 256, 0.5)
(12, 5, 1, 256, 0.5)
(13, 5, 1, 194, 0.37890625, 'intermediate', 1, 0.361328125)
(13, 5, 1, 197, 0.384765625, 'intermediate', 2, 0.37890625)
(13, 5, 1, 215, 0.419921875, 'intermediate', 4, 0.384765625)
(13, 5, 1, 215, 0.419921875)
KVC(0.95): (12, 5, 1)

(15, 5, 2, 256, 0.5)
(16, 5, 2, 256, 0.5)
(17, 5, 2, 256, 0.5)
(18, 5, 2, 256, 0.5)
(19, 5, 2, 256, 0.5)
(20, 5, 2, 256, 0.5)
(21, 5, 2, 256, 0.5)
(22, 5, 2, 256, 0.5)
(23, 5, 2, 256, 0.5)
(24, 5, 2, 256, 0.5)
(25, 5, 2, 214, 0.41796875, 'intermediate', 1, 0.4140625)
(25, 5, 2, 224, 0.4375, 'intermediate', 2, 0.41796875)
(25, 5, 2, 235, 0.458984375, 'intermediate', 7, 0.4375)
(25, 5, 2, 237, 0.462890625, 'intermediate', 9, 0.458984375)
(25, 5, 2, 242, 0.47265625, 'intermediate', 14, 0.462890625)
(25, 5, 2, 254, 0.49609375, 'intermediate', 17, 0.47265625)
(25, 5, 2, 254, 0.49609375)
(26, 5, 2, 195, 0.380859375, 'intermediate', 13, 0.376953125)
(26, 5, 2, 195, 0.380859375)
KVC(0.95): (25, 5, 2)

(23, 5, 3, 256, 0.5)
(24, 5, 3, 256, 0.5)
(25, 5, 3, 256, 0.5)
(26, 5, 3, 256, 0.5)
(27, 5, 3, 256, 0.5)
(28, 5, 3, 256, 0.5)
(29, 5, 3, 256, 0.5)
(30, 5, 3, 256, 0.5)
(31, 5, 3, 256, 0.5)
(32, 5, 3, 256, 0.5)
(33, 5, 3, 256, 0.5)
(34, 5, 3, 256, 0.5)
(35, 5, 3, 256, 0.5)
(36, 5, 3, 256, 0.5)
(37, 5, 3, 218, 0.42578125, 'intermediate', 4, 0.423828125)
(37, 5, 3, 226, 0.44140625, 'intermediate', 17, 0.42578125)
(37, 5, 3, 226, 0.44140625)
KVC(0.95): (36, 5, 3)

(31, 5, 4, 256, 0.5)
(32, 5, 4, 256, 0.5)
(33, 5, 4, 256, 0.5)
(34, 5, 4, 256, 0.5)
(35, 5, 4, 256, 0.5)
(36, 5, 4, 256, 0.5)
(37, 5, 4, 256, 0.5)
(38, 5, 4, 256, 0.5)
(39, 5, 4, 256, 0.5)
(40, 5, 4, 256, 0.5)
(41, 5, 4, 256, 0.5)
(42, 5, 4, 256, 0.5)
(43, 5, 4, 256, 0.5)
(44, 5, 4, 256, 0.5)
(45, 5, 4, 256, 0.5)
(46, 5, 4, 256, 0.5)
(47, 5, 4, 256, 0.5)
(48, 5, 4, 256, 0.5)
(49, 5, 4, 242, 0.47265625, 'intermediate', 1, 0.4453125)
(49, 5, 4, 243, 0.474609375, 'intermediate', 7, 0.47265625)
(49, 5, 4, 256, 0.5)
(50, 5, 4, 194, 0.37890625, 'intermediate', 1, 0.357421875)
(50, 5, 4, 225, 0.439453125, 'intermediate', 2, 0.37890625)
(50, 5, 4, 234, 0.45703125, 'intermediate', 4, 0.439453125)
(50, 5, 4, 234, 0.45703125)
(51, 5, 4, 203, 0.396484375, 'intermediate', 2, 0.357421875)
(51, 5, 4, 203, 0.396484375)
KVC(0.95): (50, 5, 4)

(39, 5, 5, 256, 0.5)
(40, 5, 5, 256, 0.5)
(41, 5, 5, 256, 0.5)
(42, 5, 5, 256, 0.5)
(43, 5, 5, 256, 0.5)
(44, 5, 5, 256, 0.5)
(45, 5, 5, 256, 0.5)
(46, 5, 5, 256, 0.5)
(47, 5, 5, 256, 0.5)
(48, 5, 5, 256, 0.5)
(49, 5, 5, 256, 0.5)
(50, 5, 5, 256, 0.5)
(51, 5, 5, 256, 0.5)
(52, 5, 5, 256, 0.5)
(53, 5, 5, 256, 0.5)
(54, 5, 5, 256, 0.5)
(55, 5, 5, 256, 0.5)
(56, 5, 5, 256, 0.5)
(57, 5, 5, 256, 0.5)
(58, 5, 5, 256, 0.5)
(59, 5, 5, 256, 0.5)
(60, 5, 5, 256, 0.5)
(60, 5, 5, 256, 0.5)
(61, 5, 5, 244, 0.4765625, 'intermediate', 3, 0.4375)
(61, 5, 5, 245, 0.478515625, 'intermediate', 12, 0.4765625)
(61, 5, 5, 245, 0.478515625)
(62, 5, 5, 218, 0.42578125, 'intermediate', 5, 0.390625)
(62, 5, 5, 231, 0.451171875, 'intermediate', 7, 0.42578125)
(62, 5, 5, 231, 0.451171875)

(47, 5, 6, 256, 0.5)
(48, 5, 6, 256, 0.5)
(49, 5, 6, 256, 0.5)
(50, 5, 6, 256, 0.5)
(51, 5, 6, 256, 0.5)
(52, 5, 6, 256, 0.5)
(53, 5, 6, 256, 0.5)
(54, 5, 6, 256, 0.5)
(55, 5, 6, 256, 0.5)
(56, 5, 6, 256, 0.5)
(57, 5, 6, 256, 0.5)
(58, 5, 6, 256, 0.5)
(59, 5, 6, 256, 0.5)
(60, 5, 6, 256, 0.5)
(55, 5, 7, 256, 0.5)
(56, 5, 7, 256, 0.5)
(57, 5, 7, 256, 0.5)
(58, 5, 7, 256, 0.5)
(59, 5, 7, 256, 0.5)
(60, 5, 7, 256, 0.5)
done

N = 60
K = [5] #,3,4,5] #,2,3,4,5] #,4] #,3] #,4,5,6,7,8] #,9,10]
H = [1,2,3,4,5,6,7,8] #,32,128,512]
max_l = 10

import itertools
import numpy
import random
from sklearn.neural_network import MLPClassifier

results = []
print("n","k","h","successful classifications", "rate")
for k in K:
    numpy.random.seed(0)
    # print data
    for h in H:
        numpy.random.seed(0)
        for n in range(N):
            n += 1
            if n <= 2*(h-1)*(k-1)+k+1:
              continue
            data_results = []
            l_len = min(n-1,max_l-1)
            for r_data in range(20):
                numpy.random.seed(r_data)
                data = numpy.random.normal(size=[N,k])
                numpy.random.seed(0)
                true_results = 0
                for label_int in range(2**l_len):
                    if max_l < n:
                      label_int = numpy.random.randint(0, 2**(n-1))
                    labels = [int(i) for i in bin(label_int * 2 + 2**(N+2))[-n:]]
                    d = data[:n]
                    converged = False
                    for r_mlp in range(20): #lbfgs
                        clf = MLPClassifier(
                            hidden_layer_sizes=(h,), random_state=r_mlp, 
                            #activation='relu', solver="lbfgs",
                            activation='relu', solver="lbfgs",
                            alpha=0)
                        clf.fit(d, labels)
                        if (clf.predict(d) == labels).all():
                            true_results += 1
                            converged = True
                            break
                    if true_results >= 2**(l_len-1):
                      break
                if true_results >= 2**(l_len-1):
                    data_results.append(true_results)
                    break
                if data_results and true_results > max(data_results):
                    print(n, k, h, true_results, true_results*1.0/2**l_len, "intermediate", r_data, max(data_results)*1.0/2**l_len)
                data_results.append(true_results)
            true_results = max(data_results)
            print(n, k, h, true_results, true_results*1.0/2**l_len)
            results.append((n, k, h, true_results, true_results*1.0/2**l_len))
            if true_results*1.0/2**l_len < 0.45:
                print "KVC(0.95): "+str((n-1,k, h))
                print
                break
    print "done"